<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac</name>
    </assembly>
    <members>
        <member name="T:Autofac.GeneratedFactories.FactoryGenerator">
            <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
        </member>
        <member name="M:Autofac.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Service)">
            <summary>
            Create a factory generator.
            </summary>
            <param name="service">The service that will be resolved in
            order to create the products of the factory.</param>
            <param name="delegateType">The factory delegate type.</param>
        </member>
        <member name="M:Autofac.GeneratedFactories.FactoryGenerator.GenerateFactory(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="M:Autofac.GeneratedFactories.FactoryGenerator.GenerateFactory``1(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="T:Autofac.Builder.GeneratedFactoryExtensions">
            <summary>
            Extends ContainerBuilder with methods for registering generated factories.
            </summary>
            <remarks>
            This file is excluded from the .NET 2.0 build.
            </remarks>
        </member>
        <member name="M:Autofac.Builder.GeneratedFactoryExtensions.RegisterGeneratedFactory(Autofac.Builder.ContainerBuilder,System.Type,Autofac.Service)">
            <summary>
            Registers the factory delegate.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="delegateType">The type of the delegate.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.GeneratedFactoryExtensions.RegisterGeneratedFactory(Autofac.Builder.ContainerBuilder,System.Type)">
            <summary>
            Registers the factory delegate.
            </summary>
            <param name="builder">The container builder.</param>
            <param name="delegateType">The type of the delegate.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.GeneratedFactoryExtensions.RegisterGeneratedFactory``1(Autofac.Builder.ContainerBuilder,Autofac.Service)">
            <summary>
            Registers the factory delegate.
            </summary>
            <param name="builder">The container builder.</param>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.GeneratedFactoryExtensions.RegisterGeneratedFactory``1(Autofac.Builder.ContainerBuilder)">
            <summary>
            Registers the factory delegate.
            </summary>
            <param name="builder">The container builder.</param>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="T:Autofac.ActivatedEventArgs">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="M:Autofac.ActivatedEventArgs.#ctor(Autofac.IContext,Autofac.IComponentRegistration,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ActivatedEventArgs"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.ActivatedEventArgs.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.ActivatedEventArgs.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.ActivatedEventArgs.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="T:Autofac.ActivatingEventArgs">
            <summary>
            Fired during the activation process to allow instances to be proxied or swapped.
            </summary>
        </member>
        <member name="M:Autofac.ActivatingEventArgs.#ctor(Autofac.IContext,Autofac.IComponentRegistration,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ActivatingEventArgs"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.ActivatingEventArgs.Context">
            <summary>
            The context in which the activation is occurring.
            </summary>
        </member>
        <member name="P:Autofac.ActivatingEventArgs.Component">
            <summary>
            The component providing the instance being activated.
            </summary>
        </member>
        <member name="P:Autofac.ActivatingEventArgs.Instance">
            <summary>
            The instance that will be used to satisfy the request (may be substituted.)
            </summary>
        </member>
        <member name="T:Autofac.ComponentRegisteredEventArgs">
            <summary>
            Information about the ocurrence of a component being registered
            with a container.
            </summary>
        </member>
        <member name="M:Autofac.ComponentRegisteredEventArgs.#ctor(Autofac.IContainer,Autofac.IComponentRegistration)">
            <summary>
            Create a new instance with a valid container and component registration.
            </summary>
            <param name="container">The container into which the registration 
            was made.</param>
            <param name="componentRegistration">The component registration.</param>
        </member>
        <member name="P:Autofac.ComponentRegisteredEventArgs.Container">
            <summary>
            The container into which the registration was made.
            </summary>
        </member>
        <member name="P:Autofac.ComponentRegisteredEventArgs.ComponentRegistration">
            <summary>
            The component registration.
            </summary>
        </member>
        <member name="T:Autofac.Parameter">
            <summary>
            Used in order to provide a value to a constructor parameter or property on an instance
            being created by the container.
            </summary>
            <remarks>
            Not all parameters can be applied to all sites.
            </remarks>
        </member>
        <member name="M:Autofac.Parameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.Parameter.MatchTypes(System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Helper method for parameters that allow type conversion.
            </summary>
            <param name="pi">The parameter.</param>
            <param name="parameterValue">The value.</param>
            <returns>A representation of the value able to be supplied for the parameter.</returns>
        </member>
        <member name="T:Autofac.Component.Activation.DirectConstructorInvoker">
            <summary>
            Executes the ConstructorInfo directly.
            </summary>
        </member>
        <member name="T:Autofac.Component.Activation.IConstructorInvoker">
            <summary>
            Invokes the specified constructor (or an equivalent.)
            </summary>
        </member>
        <member name="M:Autofac.Component.Activation.IConstructorInvoker.InvokeConstructor(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Reflection.ConstructorInfo,System.Func{System.Object}[])">
            <summary>
            Invokes the constructor.
            </summary>
            <param name="context">The context.</param>
            <param name="parameters">The parameters.</param>
            <param name="ci">The selected constructor.</param>
            <param name="args">Arguments appropriate to the constructor.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Autofac.Component.Activation.DirectConstructorInvoker.InvokeConstructor(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Reflection.ConstructorInfo,System.Func{System.Object}[])">
            <summary>
            Invokes the constructor.
            </summary>
            <param name="context">The context.</param>
            <param name="parameters">The parameters.</param>
            <param name="ci">The selected constructor.</param>
            <param name="args">Arguments appropriate to the constructor.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="T:Autofac.Component.Descriptor">
            <summary>
            Describes a component and its services.
            </summary>
        </member>
        <member name="T:Autofac.IComponentDescriptor">
            <summary>
            Captures the elements of a component registration that are shared between
            all contexts in which the component can be used.
            </summary>
        </member>
        <member name="P:Autofac.IComponentDescriptor.Services">
            <summary>
            The services (named and typed) exposed by the component.
            </summary>
        </member>
        <member name="P:Autofac.IComponentDescriptor.Id">
            <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Autofac.IComponentDescriptor.ExtendedProperties">
            <summary>
            Additional data associated with the component.
            </summary>
            <remarks>Note, component registrations are currently copied into
            subcontainers: these properties are shared between all instances of the
            registration in all subcontainers.</remarks>
        </member>
        <member name="P:Autofac.IComponentDescriptor.BestKnownImplementationType">
            <summary>
            Returns the most specific type that the returned intstances are assignable to.
            This may be the actual implementation type, a base class, and abstract class, or an
            interface.
            </summary>
            <remarks>
            For registrations where the type is an interface or abstract class
            it is recommended that the returned instances are inspected as they are activated.
            </remarks>
            <returns>The best known implementation type.</returns>
        </member>
        <member name="M:Autofac.Component.Descriptor.#ctor(Autofac.Service,System.Collections.Generic.IEnumerable{Autofac.Service},System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Descriptor"/> class.
            </summary>
            <param name="id">The id. Will be exposed as a service.</param>
            <param name="services">The services. May or may not contain the id.</param>
            <param name="bestKnownImplementationType">Most specific type that can be
            determined as the implementation.</param>
        </member>
        <member name="M:Autofac.Component.Descriptor.#ctor(Autofac.Service,System.Collections.Generic.IEnumerable{Autofac.Service},System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Descriptor"/> class.
            </summary>
            <param name="id">The id. Will be exposed as a service.</param>
            <param name="services">The services. May or may not contain the id.</param>
            <param name="extendedProperties">The extended properties.</param>
            <param name="bestKnownImplementationType">Most specific type that can be
            determined as the implementation.</param>
        </member>
        <member name="M:Autofac.Component.Descriptor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Descriptor.Services">
            <summary>
            The services (named and typed) exposed by the component.
            </summary>
            <value></value>
        </member>
        <member name="P:Autofac.Component.Descriptor.Id">
            <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
            <value></value>
        </member>
        <member name="P:Autofac.Component.Descriptor.ExtendedProperties">
            <summary>
            Additional data associated with the component.
            </summary>
            <value></value>
            <remarks>Note, component registrations are currently copied into
            subcontainers: these properties are shared between all instances of the
            registration in all subcontainers.</remarks>
        </member>
        <member name="P:Autofac.Component.Descriptor.BestKnownImplementationType">
            <summary>
            Returns the most specific type that the returned intstances are assignable to.
            This may be the actual implementation type, a base class, and abstract class, or an
            interface.
            </summary>
            <remarks>
            For registrations where the type is an interface or abstract class
            it is recommended that the returned instances are inspected as they are activated.
            </remarks>
            <returns>The best known implementation type.</returns>
        </member>
        <member name="T:Autofac.Component.DescriptorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.DescriptorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.DescriptorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.DescriptorResources.NullServiceProvided">
            <summary>
              Looks up a localized string similar to The value &apos;null&apos; is cannot be registered as a valid service..
            </summary>
        </member>
        <member name="P:Autofac.Component.DescriptorResources.ToStringFormat">
            <summary>
              Looks up a localized string similar to Implementor = {0}, Services = [{1}].
            </summary>
        </member>
        <member name="P:Autofac.Component.DescriptorResources.UnknownImplementor">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="T:Autofac.Component.Scope.SingletonScopeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.SingletonScopeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.SingletonScopeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.SingletonScopeResources.Description">
            <summary>
              Looks up a localized string similar to Singleton.
            </summary>
        </member>
        <member name="T:Autofac.Component.Tagged.IRegistrationDecorator">
            <summary>
            Implemented on registrations that decorate other registrations, providing the
            decorated instance in a non-generic manner to improve API usability.
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.IRegistrationDecorator.InnerRegistration">
            <summary>
            The decorated instance.
            </summary>
        </member>
        <member name="T:Autofac.Component.Tagged.ITagged`1">
            <summary>
            Exposes a tag value.
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.ITagged`1.Tag">
            <summary>
            Gets the tag applied to the object.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="T:Autofac.Configuration.ExtendedPropertyElement">
            <summary>
            Element describing a component property.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ExtendedPropertyElement.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Autofac.Configuration.ExtendedPropertyElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Autofac.Configuration.ExtendedPropertyElement.Type">
            <summary>
            Gets the type of the value.
            </summary>
            <value>The type of the value. Defaults to string if not specified.</value>
        </member>
        <member name="T:Autofac.Configuration.ExtendedPropertyElementCollection">
            <summary>
            Collection of extended property elements.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.NamedConfigurationElementCollection`1">
            <summary>
            Base for multi-valued configuration elements.
            </summary>
            <typeparam name="TElementType"></typeparam>
        </member>
        <member name="M:Autofac.Configuration.NamedConfigurationElementCollection`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.NamedConfigurationElementCollection`1"/> class.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementKey">The element key.</param>
        </member>
        <member name="M:Autofac.Configuration.NamedConfigurationElementCollection`1.IsElementName(System.String)">
            <summary>
            Indicates whether the specified <see cref="T:System.Configuration.ConfigurationElement"/> exists in the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <param name="elementName">The name of the element to verify.</param>
            <returns>
            true if the element exists in the collection; otherwise, false. The default is false.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.NamedConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.NamedConfigurationElementCollection`1.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for.</param>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:Autofac.Configuration.NamedConfigurationElementCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Autofac.Configuration.NamedConfigurationElementCollection`1.ElementName">
            <summary>
            Gets the name used to identify this collection of elements in the configuration file when overridden in a derived class.
            </summary>
            <value></value>
            <returns>The name of the collection; otherwise, an empty string. The default is an empty string.</returns>
        </member>
        <member name="P:Autofac.Configuration.NamedConfigurationElementCollection`1.CollectionType">
            <summary>
            Gets the type of the <see cref="T:System.Configuration.ConfigurationElementCollection"/>.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        </member>
        <member name="P:Autofac.Configuration.NamedConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the TElementType at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:Autofac.Configuration.ExtendedPropertyElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.PropertyElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.FileElement">
            <summary>
            Element describing an additional configuration file.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.FileElement.Name">
            <summary>
            Gets the filename of the file.
            </summary>
            <value>The filename.</value>
        </member>
        <member name="P:Autofac.Configuration.FileElement.Section">
            <summary>
            Gets the section name of the section in the configuration
            file.
            </summary>
            <value>The section name.</value>
        </member>
        <member name="T:Autofac.Configuration.FileElementCollection">
            <summary>
            A collection of file elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.FileElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.FileElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.IRegistrationSource">
            <summary>
            Allows registrations to be made on-the-fly when unregistered
            services are requested (lazy registrations.)
            </summary>
        </member>
        <member name="M:Autofac.IRegistrationSource.TryGetRegistration(Autofac.Service,Autofac.IComponentRegistration@)">
            <summary>
            Retrieve a registration for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registration">A registration providing the service.</param>
            <returns>True if the registration could be created.</returns>
        </member>
        <member name="T:Autofac.Modules.ImplicitCollectionSupportModule">
            <summary>
            Configures the container so that requests for IEnumerable{T} or T[]
            will result in all of the available instances of T being returned.
            </summary>
        </member>
        <member name="T:Autofac.IModule">
            <summary>
            Represents a set of components and related functionality
            packaged together.
            </summary>
        </member>
        <member name="M:Autofac.IModule.Configure(Autofac.IContainer)">
            <summary>
            Apply the module to the container.
            </summary>
            <param name="container">Container to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Modules.ImplicitCollectionSupportModule.Configure(Autofac.IContainer)">
            <summary>
            Configures the container.
            </summary>
            <param name="container">Container to configure.</param>
        </member>
        <member name="T:Autofac.NamedPropertyParameter">
            <summary>
            Injects into properties according to their name.
            Needs to be reviewed - not sure if it makes sense to
            have properties and parameters related this way.
            </summary>
        </member>
        <member name="T:Autofac.ConstantParameter">
            <summary>
            Base class for parameters that provide a constant value.
            </summary>
        </member>
        <member name="M:Autofac.ConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Create a constant parameter that will apply to parameters matching
            the supplied predicate.
            </summary>
            <param name="value"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Autofac.ConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="P:Autofac.ConstantParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="M:Autofac.NamedPropertyParameter.#ctor(System.String,System.Object)">
            <summary>
            Create a named parameter with the specified value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Autofac.NamedPropertyParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:Autofac.NamedParameter">
            <summary>
            A parameter identified according to its name within an argument list declaration.
            </summary>
        </member>
        <member name="M:Autofac.NamedParameter.#ctor(System.String,System.Object)">
            <summary>
            Create a named parameter with the specified value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Autofac.NamedParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:Autofac.ParameterExtensions">
            <summary>
            Extension methods that ease the extraction of particluar kinds of parameter values from
            an enumerable sequence of the Parameter abstract type.
            Each method returns the first matching parameter value, or throws an exception if
            none is provided.
            </summary>
        </member>
        <member name="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Parameter},System.String)">
            <summary>
            Retrieve a parameter value from a <see cref="T:Autofac.NamedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="name">The name of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
        </member>
        <member name="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Int32)">
            <summary>
            Retrieve a parameter value from a <see cref="T:Autofac.PositionalParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="position">The zero-based position of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
        </member>
        <member name="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a parameter value from a <see cref="T:Autofac.TypedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <returns>The value of the selected parameter.</returns>
        </member>
        <member name="T:Autofac.PositionalParameter">
            <summary>
            A parameter that is identified according to an integer representing its
            position in an argument list.
            </summary>
        </member>
        <member name="M:Autofac.PositionalParameter.#ctor(System.Int32,System.Object)">
            <summary>
            Construct a positional parameter with the specified value.
            </summary>
            <param name="position">The zero-based position of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Autofac.PositionalParameter.Position">
            <summary>
            The zero-based position of the parameter.
            </summary>
        </member>
        <member name="T:Autofac.PreparingEventArgs">
            <summary>
            Fired before the activation process to allow parameters to be changed or an alternative
            instance to be provided.
            </summary>
        </member>
        <member name="M:Autofac.PreparingEventArgs.#ctor(Autofac.IContext,Autofac.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ActivatingEventArgs"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Autofac.PreparingEventArgs.Context">
            <summary>
            The context in which the activation is occurring.
            </summary>
        </member>
        <member name="P:Autofac.PreparingEventArgs.Component">
            <summary>
            The component providing the instance being activated.
            </summary>
        </member>
        <member name="P:Autofac.PreparingEventArgs.Instance">
            <summary>
            An instance can be supplied in order to avoid using the regular activator.
            </summary>
        </member>
        <member name="P:Autofac.PreparingEventArgs.Parameters">
            <summary>
            The parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.Automatic.AutomaticRegistrar">
            <summary>
            Automatically registers types that match a supplied predicate.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.Registrar`1">
            <summary>
            Base class for component registrars.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.IRegistrar`1">
            <summary>
            Provides an interface through which a component registration can
            be incrementally built. Calling any of the methods on this interface
            after 'Build' has been called on the parent ContainerBuilder will have
            no effect.
            </summary>
            <typeparam name="TSyntax">Self-type.</typeparam>
        </member>
        <member name="T:Autofac.Registrars.IFluentInterface">
            <summary>
            Hides standard Object members to make fluent interfaces
            easier to read.
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IFluentInterface.GetType">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Registrars.IFluentInterface.GetHashCode">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Registrars.IFluentInterface.ToString">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Registrars.IFluentInterface.Equals(System.Object)">
            <summary>
            Standard System.Object member.
            </summary>
            <param name="other">The other.</param>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.As``1">
            <summary>
            Change the service associated with the registration.
            </summary>
            <typeparam name="TService">The service that the registration will expose.</typeparam>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.As``2">
            <summary>
            Change the services associated with the registration.
            </summary>
            <typeparam name="TService1">The first service that the registration will expose.</typeparam>
            <typeparam name="TService2">The second service that the registration will expose.</typeparam>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.As``3">
            <summary>
            Change the services associated with the registration.
            </summary>
            <typeparam name="TService1">The first service that the registration will expose.</typeparam>
            <typeparam name="TService2">The second service that the registration will expose.</typeparam>
            <typeparam name="TService3">The third service that the registration will expose.</typeparam>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.As(System.Type[])">
            <summary>
            Change the service associated with the registration.
            </summary>
            <param name="services">The services that the registration will expose.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.WithOwnership(Autofac.InstanceOwnership)">
            <summary>
            Change the ownership model associated with the registration.
            This determines when the instances are disposed and by whom.
            </summary>
            <param name="ownership">The ownership model to use.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.ExternallyOwned">
            <summary>
            The instance(s) will not be disposed when the container is disposed.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.OwnedByContainer">
            <summary>
            The instance(s) will be disposed with the container.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.WithScope(Autofac.InstanceScope)">
            <summary>
            Change the scope associated with the registration.
            This determines how instances are tracked and shared.
            </summary>
            <param name="scope">The scope model to use.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.FactoryScoped">
            <summary>
            An instance will be created every time one is requested.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.ContainerScoped">
            <summary>
            An instance will be created once per container.
            </summary>
            <seealso cref="M:Autofac.IContainer.CreateInnerContainer"/>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.SingletonScoped">
            <summary>
            Only one instance will ever be created.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.OnRegistered(System.EventHandler{Autofac.Registrars.RegisteredEventArgs})">
            <summary>
            Calls the provided handler when the registration is made on the
            container being built.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.OnPreparing(System.EventHandler{Autofac.PreparingEventArgs})">
            <summary>
            Call the provided handler when preparing to activate an instance. OnPreparing
            is the place to interrupt of modify the parameters to the activation process.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.OnActivating(System.EventHandler{Autofac.ActivatingEventArgs})">
            <summary>
            Call the provided handler when activating an instance. OnActivating
            is the place to do work to get an instance into a usable state.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.OnActivated(System.EventHandler{Autofac.ActivatedEventArgs})">
            <summary>
            Call the provided handler when an instance is activated. This is the
            place to perform operations on the activated instance that will use that
            instance's behaviour/features.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.WithExtendedProperty(System.String,System.Object)">
            <summary>
            Associates an extended property with the registration.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.InContext``1(``0)">
            <summary>
            Sets the component to be resolvable only in contexts tagged with the
            provided tag. Implies that the component is container-scoped, however factory-scoped can be
            specified explicitly.
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
            <param name="tag">The tag.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IRegistrar`1.OnlyIf(System.Predicate{Autofac.IContainer})">
            <summary>
            Applies the registration only if the supplied predicate is true at the time
            the container is built. If applied multiple times, predicates are composed
            with the 'and' operator.
            </summary>
            <param name="containerPredicate">Predicate based on a container.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="P:Autofac.Registrars.IRegistrar`1.RegistrationCreator">
            <summary>
            Gets or sets the registration creator.
            </summary>
            <value>The registration creator.</value>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.Configure(Autofac.IContainer)">
            <summary>
            Apply the module to the container. Subclasses should implement DoConfigure() rather than
            overriding this member.
            </summary>
            <param name="container">Container to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.DoConfigure(Autofac.IContainer)">
            <summary>
            Apply the module to the container.
            </summary>
            <param name="container">Container to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.As``1">
            <summary>
            Change the service associated with the registration.
            </summary>
            <typeparam name="TService">The service that the registration will expose.</typeparam>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.As``2">
            <summary>
            Change the services associated with the registration.
            </summary>
            <typeparam name="TService1">The first service that the registration will expose.</typeparam>
            <typeparam name="TService2">The second service that the registration will expose.</typeparam>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.As``3">
            <summary>
            Change the services associated with the registration.
            </summary>
            <typeparam name="TService1">The first service that the registration will expose.</typeparam>
            <typeparam name="TService2">The second service that the registration will expose.</typeparam>
            <typeparam name="TService3">The third service that the registration will expose.</typeparam>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.As(System.Type[])">
            <summary>
            Change the service associated with the registration.
            </summary>
            <param name="services">The services that the registration will expose.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.WithOwnership(Autofac.InstanceOwnership)">
            <summary>
            Change the ownership model associated with the registration.
            This determines when the instances are disposed and by whom.
            </summary>
            <param name="ownership">The ownership model to use.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.ExternallyOwned">
            <summary>
            The instance(s) will not be disposed when the container is disposed.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.OwnedByContainer">
            <summary>
            The instance(s) will be disposed with the container.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.WithScope(Autofac.InstanceScope)">
            <summary>
            Change the scope associated with the registration.
            This determines how instances are tracked and shared.
            </summary>
            <param name="scope">The scope model to use.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.FactoryScoped">
            <summary>
            An instance will be created every time one is requested.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.ContainerScoped">
            <summary>
            An instance will be created once per container.
            </summary>
            <seealso cref="M:Autofac.IContainer.CreateInnerContainer"/>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.SingletonScoped">
            <summary>
            Only one instance will ever be created.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.OnRegistered(System.EventHandler{Autofac.Registrars.RegisteredEventArgs})">
            <summary>
            Call the provided handler when activating an instance.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.OnPreparing(System.EventHandler{Autofac.PreparingEventArgs})">
            <summary>
            Call the provided handler when preparing to activate an instance. OnPreparing
            is the place to interrupt of modify the parameters to the activation process.
            </summary>
            <param name="handler">The handler.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.OnActivating(System.EventHandler{Autofac.ActivatingEventArgs})">
            <summary>
            Call the provided handler when activating an instance.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.OnActivated(System.EventHandler{Autofac.ActivatedEventArgs})">
            <summary>
            Call the provided handler when an instance is activated.
            </summary>
            <param name="handler">The handler.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.WithExtendedProperty(System.String,System.Object)">
            <summary>
            Associates an extended property with the registration. The property must not
            already exist.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.InContext``1(``0)">
            <summary>
            Sets the component to be resolvable only in contexts tagged with the
            provided tag. Implies that the component is container-scoped, however factory-scoped can be
            specified explicitly.
            </summary>
            <typeparam name="T">The type of the tag.</typeparam>
            <param name="tag">The tag.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.OnlyIf(System.Predicate{Autofac.IContainer})">
            <summary>
            Applies the registration only if the supplied predicate is true at the time
            the container is built. If applied multiple times, predicates are composed
            with the 'and' operator.
            </summary>
            <param name="containerPredicate">Predicate based on a container.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.AddService(Autofac.Service)">
            <summary>
            Add a service to be exposed by the component.
            </summary>
            <param name="service">The service to add.</param>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.AddServices(System.Collections.Generic.IEnumerable{Autofac.Service})">
            <summary>
            Add many services to be exposed by the component.
            </summary>
            <param name="services">The services to add (by calling AddService().)</param>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.FireRegistered(Autofac.Registrars.RegisteredEventArgs)">
            <summary>
            Fires the registered event.
            </summary>
            <param name="e">The <see cref="T:Autofac.Registrars.RegisteredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.RegisterComponent(Autofac.IContainer,Autofac.IComponentRegistration)">
            <summary>
            Sets up the registration with events, registers it in the container, and fires
            the Registered event.
            </summary>
            <param name="container">The container.</param>
            <param name="cr">The cr.</param>
        </member>
        <member name="M:Autofac.Registrars.Registrar`1.Autofac#Registrars#IFluentInterface#GetType">
            <summary>
            Base class for component registrars.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.RegistrationCreator">
            <summary>
            Gets or sets the registration creator.
            </summary>
            <value>The registration creator.</value>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.Services">
            <summary>
            The services exposed by this registration.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.Scope">
            <summary>
            The instance scope used by this registration.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.Ownership">
            <summary>
            The instance ownership used by this registration.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.PreparingHandlers">
            <summary>
            The handlers for the Preparing event used by this registration.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.ActivatingHandlers">
            <summary>
            The handlers for the Activating event used by this registration.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.ActivatedHandlers">
            <summary>
            The handlers for the Activated event used by this registration.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Registrar`1.ExtendedProperties">
            <summary>
            Gets the extended properties.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="T:Autofac.Registrars.IGenericRegistrar">
            <summary>
            Provides builder syntax for generic registrations.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IGenericRegistrar.UsingConstructor(System.Type[])">
            <summary>
            Enforce that the specific constructor with the provided signature is used.
            </summary>
            <param name="ctorSignature">The types that designate the constructor to use.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IGenericRegistrar.WithArguments(Autofac.Parameter[])">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.IGenericRegistrar.WithArguments(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.IGenericRegistrar.WithProperties(Autofac.NamedPropertyParameter[])">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.IGenericRegistrar.WithProperties(System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.#ctor(System.Predicate{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.Automatic.AutomaticRegistrar"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.DoConfigure(Autofac.IContainer)">
            <summary>
            Registers the component.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.UsingConstructor(System.Type[])">
            <summary>
            Enforce that the specific constructor with the provided signature is used.
            </summary>
            <param name="ctorSignature">The types that designate the constructor to use.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.WithArguments(Autofac.Parameter[])">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.WithArguments(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.WithProperties(Autofac.NamedPropertyParameter[])">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrar.WithProperties(System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="P:Autofac.Registrars.Automatic.AutomaticRegistrar.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Builder.ActivatedHandler">
            <summary>
            Utilities to handle common activation scenarios
            </summary>
        </member>
        <member name="M:Autofac.Builder.ActivatedHandler.InjectProperties(System.Object,Autofac.ActivatedEventArgs)">
            <summary>
            Inject properties from the context into the newly
            activated instance.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Autofac.ActivatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Autofac.Builder.ActivatedHandler.InjectUnsetProperties(System.Object,Autofac.ActivatedEventArgs)">
            <summary>
            Inject properties from the context into the newly
            activated instance unless they're non null on the instance.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Autofac.ActivatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Autofac.Builder.ActivatingHandler">
            <summary>
            Utilities to handle common activation scenarios
            </summary>
        </member>
        <member name="M:Autofac.Builder.ActivatingHandler.InjectProperties(System.Object,Autofac.ActivatingEventArgs)">
            <summary>
            Inject properties from the context into the newly
            activated instance.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Autofac.ActivatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Autofac.Builder.ActivatingHandler.InjectUnsetProperties(System.Object,Autofac.ActivatingEventArgs)">
            <summary>
            Inject properties from the context into the newly
            activated instance unless they're non null on the instance.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Autofac.ActivatingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Autofac.Registrars.Automatic.AutomaticRegistrationHandler">
            <summary>
            Provides registrations based on a requested type.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.ReflectiveRegistrationSource">
            <summary>
            This class provides a common base for registration handlers that provide
            reflection-based registrations.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.ReflectiveRegistrationSource.#ctor(Autofac.Registrars.DeferredRegistrationParameters,Autofac.Component.Activation.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.ReflectiveRegistrationSource"/> class.
            </summary>
            <param name="deferredParams">The deferred params.</param>
            <param name="constructorSelector">The constructor selector.</param>
            <param name="arguments">Additional arguments to supply to the component's constructor.</param>
            <param name="properties">Additional properties to set on the component.</param>
        </member>
        <member name="M:Autofac.Registrars.ReflectiveRegistrationSource.TryGetRegistration(Autofac.Service,Autofac.IComponentRegistration@)">
            <summary>
            Retrieve a registration for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registration">A registration providing the service.</param>
            <returns>True if the registration could be created.</returns>
        </member>
        <member name="M:Autofac.Registrars.ReflectiveRegistrationSource.TryGetImplementation(Autofac.Service,System.Type@,System.Collections.Generic.IEnumerable{Autofac.Service}@)">
            <summary>
            Determine if the service represents a type that can be registered, and if so,
            retrieve that type as well as the services that the registration should expose.
            </summary>
            <param name="service">The service.</param>
            <param name="implementor">The implementation type.</param>
            <param name="services">The services.</param>
            <returns>True if a registration can be made.</returns>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrationHandler.#ctor(System.Predicate{System.Type},Autofac.Registrars.DeferredRegistrationParameters,Autofac.Component.Activation.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.Automatic.AutomaticRegistrationHandler"/> class.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="deferredParams">The deferred registration params.</param>
            <param name="constructorSelector">The constructor selector.</param>
            <param name="arguments">Additional arguments to supply to the component's constructor.</param>
            <param name="properties">Additional properties to set on the component.</param>
        </member>
        <member name="M:Autofac.Registrars.Automatic.AutomaticRegistrationHandler.TryGetImplementation(Autofac.Service,System.Type@,System.Collections.Generic.IEnumerable{Autofac.Service}@)">
            <summary>
            Determine if the service represents a type that can be registered, and if so,
            retrieve that type as well as the services that the registration should expose.
            </summary>
            <param name="service">The service.</param>
            <param name="implementor">The implementation type.</param>
            <param name="services">The services.</param>
            <returns>True if a registration can be made.</returns>
        </member>
        <member name="T:Autofac.Registrars.Collection.CollectionRegistrar`1">
            <summary>
            Register a component using a provided instance.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.ConcreteRegistrar`1">
            <summary>
            Registers a regular component.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.IConcreteRegistrar`1">
            <summary>
            A 'concrete' registrar creates IComponentRegistration
            instances that are registered with the container. This is necessary because
            some registration types (e.g. Generic) add registrations only on demand through
            IRegistrationSource and thus do not have unique names within the container.
            </summary>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.Named(System.String)">
            <summary>
            Associate a name with the registration.
            </summary>
            <param name="name"></param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.As(Autofac.Service[])">
            <summary>
            Associate services with the registration.
            </summary>
            <param name="services">The services that the registration will expose.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.DefaultOnly">
            <summary>
            Filters the services exposed by the registration to include only those that are
            not already registered. I.e., will not override existing registrations.
            </summary>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.MemberOf(System.String)">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.MemberOf``1">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.MemberOf(System.Type)">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IConcreteRegistrar`1.MemberOf(Autofac.Service)">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <param name="service">The service.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="P:Autofac.Registrars.IConcreteRegistrar`1.Id">
            <summary>
            A unique service identifier that will be associated with the resulting
            registration.
            </summary>
            <example>
            var builder = new ContainerBuilder();
            var id = builder.Register(c =&gt; new Foo()).FactoryScoped().Id;
            var container = builder.Build();
            var myFoo = container.Resolve(id);
            // container.Resolve&lt;Foo&gt;() will also work, but the id guarantees the specific registration
            </example>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ComponentRegistrar&lt;TComponent&gt; class.
            </summary>
            <param name="implementor">The implementation type.</param>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.#ctor(System.Type,Autofac.Service)">
            <summary>
            Initializes a new instance of the ComponentRegistrar&lt;TComponent&gt; class.
            </summary>
            <param name="implementor">The implementation type.</param>
            <param name="defaultService">The default service.</param>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.DoConfigure(Autofac.IContainer)">
            <summary>
            Registers the component. If the component has not been assigned a name, explicit
            services or a factory delegate, then it will be registered as providing its own type
            as the default service.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.Named(System.String)">
            <summary>
            Setst the name of the registration.
            </summary>
            <param name="name"></param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.As(Autofac.Service[])">
            <summary>
            Change the service associated with the registration.
            </summary>
            <param name="services">The services that the registration will expose.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.AddService(Autofac.Service)">
            <summary>
            Add a service to be exposed by the component.
            </summary>
            <param name="service">The service to add.</param>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.CreateActivator">
            <summary>
            Creates the activator for the registration.
            </summary>
            <returns>An activator.</returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.DefaultOnly">
            <summary>
            Filters the services exposed by the registration to include only those that are
            not already registered. I.e., will not override existing registrations.
            </summary>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.MemberOf(System.String)">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.MemberOf``1">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <typeparam name="TService">Type of the service.</typeparam>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.MemberOf(System.Type)">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <param name="serviceType">Type of the service.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.ConcreteRegistrar`1.MemberOf(Autofac.Service)">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <param name="service">The service.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="P:Autofac.Registrars.ConcreteRegistrar`1.Services">
            <summary>
            The services exposed by this registration.
            </summary>
            <value></value>
        </member>
        <member name="P:Autofac.Registrars.ConcreteRegistrar`1.Id">
            <summary>
            A unique service identifier that will be associated with the resulting
            registration.
            </summary>
            <remarks>Only created if accessed.</remarks>
        </member>
        <member name="T:Autofac.Registrars.IConcreteRegistrar">
            <summary>
            A 'concrete' registrar creates IComponentRegistration
            instances that are registered with the container. This is necessary because
            some registration types (e.g. Generic) add registrations only on demand through
            IRegistrationSource and thus do not have unique names within the container.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Collection.CollectionRegistrar`1.#ctor">
            <summary>
            Constructs a CollectionRegistrar.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Collection.CollectionRegistrar`1.CreateActivator">
            <summary>
            Creates the activator for the registration.
            </summary>
            <returns>An activator.</returns>
        </member>
        <member name="P:Autofac.Registrars.Collection.CollectionRegistrar`1.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Registrars.Collection.CollectionRegistrationAppender">
            <summary>
            Appends services to a service collection.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Collection.CollectionRegistrationAppender.#ctor(Autofac.Service)">
            <summary>
            Create a new collection registration appender for the collection
            identified by <paramref name="collectionService"/>.
            </summary>
            <param name="collectionService">The collection.</param>
        </member>
        <member name="M:Autofac.Registrars.Collection.CollectionRegistrationAppender.Add``1(Autofac.Registrars.IConcreteRegistrar{``0})">
            <summary>
            Adds the registration to a previously registered collection.
            </summary>
            <typeparam name="TRegistrar">The registrar's self-type.</typeparam>
            <param name="registrar">The registrar that will become a member of the collection.</param>
        </member>
        <member name="T:Autofac.Registrars.Collection.ServiceListActivator`1">
            <summary>
            Custom activator that maintains a service list and returns instances
            of List.
            </summary>
        </member>
        <member name="T:Autofac.Component.IActivator">
            <summary>
            Provides a method by which new instances of a
            component can be accessed.
            </summary>
        </member>
        <member name="M:Autofac.Component.IActivator.ActivateInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Create a component instance, using container
            to resolve the instance's dependencies.
            </summary>
            <param name="context">The context to use
            for dependency resolution.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <returns>A component instance. Note that while the
            returned value need not be created on-the-spot, it must
            not be returned more than once by consecutive calls. (Throw
            an exception if this is attempted. IActivationScope should
            manage singleton semantics.)</returns>
        </member>
        <member name="P:Autofac.Component.IActivator.CanSupportNewContext">
            <summary>
            A 'new context' is a scope that is self-contained
            and that can dispose the components it contains before the parent
            container is disposed. If the activator is stateless it should return
            true, otherwise false.
            </summary>
            <value>
            	<c>true</c> if this instance can support a new context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Autofac.Registrars.Collection.ServiceListActivator`1.ImplementationType">
            <summary>
            Gets the implementation type.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Collection.ServiceListActivator`1.ActivateInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Create a component instance, using container
            to resolve the instance's dependencies.
            </summary>
            <param name="context">The context to use
            for dependency resolution.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <returns>
            A component instance. Note that while the
            returned value need not be created on-the-spot, it must
            not be returned more than once by consecutive calls. (Throw
            an exception if this is attempted. IActivationScope should
            manage singleton semantics.)
            </returns>
        </member>
        <member name="P:Autofac.Registrars.Collection.ServiceListActivator`1.Items">
            <summary>
            Gets the services that will appear in instances of the list.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Autofac.Registrars.Collection.ServiceListActivator`1.CanSupportNewContext">
            <summary>
            Not supported as the ServiceListRegistration class overrides
            DuplicateForNewContext to avoid this method call.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.DeferredRegistrationParameters">
            <summary>
            Parameters that allow a registration to be created at a later point when one
            is required.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.DeferredRegistrationParameters.#ctor(Autofac.InstanceOwnership,Autofac.InstanceScope,System.Collections.Generic.IEnumerable{System.EventHandler{Autofac.PreparingEventArgs}},System.Collections.Generic.IEnumerable{System.EventHandler{Autofac.ActivatingEventArgs}},System.Collections.Generic.IEnumerable{System.EventHandler{Autofac.ActivatedEventArgs}},Autofac.Registrars.RegistrationCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.DeferredRegistrationParameters"/> class.
            </summary>
            <param name="ownership">The ownership.</param>
            <param name="scope">The scope.</param>
            <param name="preparingHandlers">The preparing handlers.</param>
            <param name="activatingHandlers">The activating handlers.</param>
            <param name="activatedHandlers">The activated handlers.</param>
            <param name="createRegistration">The create registration.</param>
        </member>
        <member name="P:Autofac.Registrars.DeferredRegistrationParameters.Ownership">
            <summary>
            Gets the ownership.
            </summary>
            <value>The ownership.</value>
        </member>
        <member name="P:Autofac.Registrars.DeferredRegistrationParameters.Scope">
            <summary>
            Gets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:Autofac.Registrars.DeferredRegistrationParameters.ActivatingHandlers">
            <summary>
            Gets the activating handlers.
            </summary>
            <value>The handlers.</value>
        </member>
        <member name="P:Autofac.Registrars.DeferredRegistrationParameters.PreparingHandlers">
            <summary>
            Gets the preparing handlers.
            </summary>
            <value>The handlers.</value>
        </member>
        <member name="P:Autofac.Registrars.DeferredRegistrationParameters.ActivatedHandlers">
            <summary>
            Gets the activated handlers.
            </summary>
            <value>The handlers.</value>
        </member>
        <member name="P:Autofac.Registrars.DeferredRegistrationParameters.RegistrationCreator">
            <summary>
            Gets the registration creator.
            </summary>
            <value>The registration creator.</value>
        </member>
        <member name="T:Autofac.Registrars.Delegate.ComponentActivator`1">
            <summary>
            Implementations of the ComponentActivator type will
            create an instance of a component, using the provided container
            to resolve its dependencies.
            </summary>
            <param name="context">The container from which the component's
            dependencies may be resolved.</param>
            <returns>An instance of the component.</returns>
            <remarks>
            A creation delegate can be used when the method of initialisation
            of a component is complex, its constructors require parameters
            that must be obtained from outside the container.
            The delegate should always return a unique instance.
            </remarks>
        </member>
        <member name="T:Autofac.Registrars.Delegate.ComponentActivatorWithParameters`1">
            <summary>
            Implementations of the ComponentActivator type will
            create an instance of a component, using the provided container
            to resolve its dependencies.
            </summary>
            <param name="context">The container from which the component's
            dependencies may be resolved.</param>
            <param name="parameters">The activation parameters.</param>
            <returns>An instance of the component.</returns>
            <remarks>
            A creation delegate can be used when the method of initialisation
            of a component is complex, its constructors require parameters
            that must be obtained from outside the container.
            The delegate should always return a unique instance.
            </remarks>
        </member>
        <member name="T:Autofac.Registrars.Generic.GenericRegistrar">
            <summary>
            Creates generic component registrations that will be automatically bound to concrete
            types as they are requested.
            </summary>
            <remarks>
            The interface of this class and returned IRegistrar are non-generic as
            C# (or the CLR) does not allow partially-constructed generic types like IList&lt;&gt;
            to be used as generic arguments.
            </remarks>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.Generic.GenericRegistrar"/> class.
            </summary>
            <param name="implementor">The implementor.</param>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.DoConfigure(Autofac.IContainer)">
            <summary>
            Registers the component.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.UsingConstructor(System.Type[])">
            <summary>
            Enforce that the specific constructor with the provided signature is used.
            </summary>
            <param name="ctorSignature">The types that designate the constructor to use.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.WithArguments(Autofac.Parameter[])">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.WithArguments(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.WithProperties(Autofac.NamedPropertyParameter[])">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrar.WithProperties(System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="P:Autofac.Registrars.Generic.GenericRegistrar.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Registrars.IReflectiveRegistrar">
            <summary>
            Adds methods to the IRegistrar interface to add additional
            information for components created using reflection.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.IReflectiveRegistrar.UsingConstructor(System.Type[])">
            <summary>
            Enforce that the specific constructor with the provided signature is used.
            </summary>
            <param name="ctorSignature">The types that designate the constructor to use.</param>
            <returns>A registrar allowing registration to continue.</returns>
        </member>
        <member name="M:Autofac.Registrars.IReflectiveRegistrar.WithArguments(Autofac.Parameter[])">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.IReflectiveRegistrar.WithArguments(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.IReflectiveRegistrar.WithProperties(Autofac.NamedPropertyParameter[])">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.IReflectiveRegistrar.WithProperties(System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="T:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrarResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrarResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrarResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrarResources.SingletonScopeOnly">
            <summary>
              Looks up a localized string similar to Provided instances can only have singleton scope. WithScope() does not need to be called, but the default builder scope has to be singleton when the instance is registered..
            </summary>
        </member>
        <member name="T:Autofac.Registrars.Reflective.ReflectiveRegistrarResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Reflective.ReflectiveRegistrarResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Reflective.ReflectiveRegistrarResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Reflective.ReflectiveRegistrarResources.TypeDoesNotProvideCtor">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; does not provide a constructor with signature &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Registrars.RegisteredEventArgs">
            <summary>
            Fired when a registrar is applied to a container.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.RegisteredEventArgs.Container">
            <summary>
            The container.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.RegisteredEventArgs.Registration">
            <summary>
            The registration being made. May be null.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.RegistrarResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.RegistrarResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.RegistrarResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.RegistrationCreator">
            <summary>
            Create the registration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="activator">Activator.</param>
            <param name="scope">Scope.</param>
            <param name="ownership">Ownership model.</param>
            <returns>The registration.</returns>
        </member>
        <member name="T:Autofac.Registrars.RegistrationRegistrar">
            <summary>
            Registers an already-constructed component registration with the container.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.RegistrationRegistrar.#ctor(Autofac.IComponentRegistration)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.RegistrationRegistrar"/> class.
            </summary>
            <param name="registration">The registration.</param>
        </member>
        <member name="M:Autofac.Registrars.RegistrationRegistrar.Configure(Autofac.IContainer)">
            <summary>
            Registers the component.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="T:Autofac.Registrars.Collection.IServiceListRegistration">
            <summary>
            Exposed by the generic ServiceListRegistration type to expose non-generic Add().
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Collection.IServiceListRegistration.Add(Autofac.Service)">
            <summary>
            Add a service (key into another component registration) to those returned
            in the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Autofac.Registrars.Collection.ServiceListRegistration`1">
            <summary>
            Registration that exposes collection interfaces onto a subset of other components
            in the container.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:Autofac.Component.Registration">
            <summary>
            Implements IComponentRegistration using activator and
            scope 'policy' classes.
            </summary>
            <remarks>
            ComponentRegistration, IActivator, IScope etc. are not parameterised
            with the component type because in some situations, i.e. when calling
            remote services through a proxy, a component type may not be available.
            </remarks>
        </member>
        <member name="T:Autofac.Disposable">
            <summary>
            Base class for disposable objects.
            </summary>
        </member>
        <member name="M:Autofac.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Autofac.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Disposable.CheckNotDisposed">
            <summary>
            Checks that this instance has not been disposed.
            </summary>
        </member>
        <member name="P:Autofac.Disposable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Autofac.IComponentRegistration">
            <summary>
            A component registration is used by the container
            to create and manage the services it holds.
            </summary>
        </member>
        <member name="M:Autofac.IComponentRegistration.ResolveInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter},Autofac.IDisposer,System.Boolean@)">
            <summary>
            	<i>Must</i> return a valid instance, or throw
            an exception on failure.
            </summary>
            <param name="context">The context that is to be used
            to resolve the instance's dependencies.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <param name="disposer">The disposer.</param>
            <param name="newInstance">if set to <c>true</c> a new instance was created.</param>
            <returns>A newly-resolved instance.</returns>
        </member>
        <member name="M:Autofac.IComponentRegistration.DuplicateForNewContext(Autofac.IComponentRegistration@)">
            <summary>
            Create a duplicate of this instance if it is semantically valid to
            copy it to a new context.
            </summary>
            <param name="duplicate">The duplicate.</param>
            <returns>True if the duplicate was created.</returns>
        </member>
        <member name="M:Autofac.IComponentRegistration.InstanceActivated(Autofac.IContext,System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.IComponentRegistration.Descriptor">
            <summary>
            Describes the component registration and the
            services it provides.
            </summary>
        </member>
        <member name="E:Autofac.IComponentRegistration.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.IComponentRegistration.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.IComponentRegistration.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="M:Autofac.Component.Registration.#ctor(Autofac.IComponentDescriptor,Autofac.Component.IActivator,Autofac.Component.IScope,Autofac.InstanceOwnership)">
            <summary>
            Create a new ComponentRegistration.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="activator">An object with which new component instances
            can be created. Required.</param>
            <param name="scope">An object that tracks created instances with
            respect to their scope of usage, i.e., per-thread, per-call etc.
            Required. Will be disposed when the registration is disposed.</param>
            <param name="ownershipModel">The ownership model that determines
            whether the instances are disposed along with the scope.</param>
        </member>
        <member name="M:Autofac.Component.Registration.ResolveInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter},Autofac.IDisposer,System.Boolean@)">
            <summary>
            	<i>Must</i> return a valid instance, or throw
            an exception on failure.
            </summary>
            <param name="context">The context that is to be used
            to resolve the instance's dependencies.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <param name="disposer">The disposer.</param>
            <param name="newInstance">if set to <c>true</c> a new instance was created.</param>
            <returns>A newly-resolved instance.</returns>
        </member>
        <member name="M:Autofac.Component.Registration.DuplicateForNewContext(Autofac.IComponentRegistration@)">
            <summary>
            Create a duplicate of this instance if it is semantically valid to
            copy it to a new context.
            </summary>
            <param name="duplicate">The duplicate.</param>
            <returns>True if the duplicate was created.</returns>
        </member>
        <member name="M:Autofac.Component.Registration.CreateDuplicate(Autofac.IComponentDescriptor,Autofac.Component.IActivator,Autofac.Component.IScope,Autofac.InstanceOwnership)">
            <summary>
            Semantically equivalent to ICloneable.Clone().
            </summary>
        </member>
        <member name="M:Autofac.Component.Registration.InstanceActivated(Autofac.IContext,System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Component.Registration.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Registration.Descriptor">
            <summary>
            Describes the component registration and the
            services it provides.
            </summary>
            <value></value>
        </member>
        <member name="E:Autofac.Component.Registration.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Component.Registration.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Component.Registration.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="P:Autofac.Component.Registration.Scope">
            <summary>
            Gets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:Autofac.Component.Registration.Activator">
            <summary>
            Gets the activator.
            </summary>
            <value>The activator.</value>
        </member>
        <member name="P:Autofac.Component.Registration.OwnershipModel">
            <summary>
            Gets the ownership model.
            </summary>
            <value>The ownership model.</value>
        </member>
        <member name="M:Autofac.Registrars.Collection.ServiceListRegistration`1.#ctor(Autofac.IComponentDescriptor,Autofac.Registrars.Collection.ServiceListActivator{`0},Autofac.Component.IScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.Collection.ServiceListRegistration`1"/> class.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="activator">The activator.</param>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Autofac.Registrars.Collection.ServiceListRegistration`1.Add(Autofac.Service)">
            <summary>
            Add a service (key into another component registration) to those returned
            in the list.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Autofac.Registrars.Collection.ServiceListRegistration`1.DuplicateForNewContext(Autofac.IComponentRegistration@)">
            <summary>
            Create a duplicate of this instance if it is semantically valid to
            copy it to a new context.
            </summary>
            <param name="duplicate">The duplicate.</param>
            <returns>True if the duplicate was created.</returns>
        </member>
        <member name="T:Autofac.Registrars.Generic.GenericRegistrationHandlerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Generic.GenericRegistrationHandlerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Generic.GenericRegistrationHandlerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.Generic.GenericRegistrationHandlerResources.ServiceNotGenericType">
            <summary>
              Looks up a localized string similar to The service &apos;{0}&apos; is not a generic type..
            </summary>
        </member>
        <member name="T:Autofac.Component.Scope.InstanceScopeFactory">
            <summary>
            Factory for IScope entities that extends the InstanceScope class.
            </summary>
        </member>
        <member name="M:Autofac.Component.Scope.InstanceScopeFactory.ToIScope(Autofac.InstanceScope)">
            <summary>
            Create an IScope corresponding to the provided enum value.
            </summary>
            <param name="scope">Enum value representing a scope.</param>
            <returns>An equivalent IScope.</returns>
        </member>
        <member name="T:Autofac.Component.Scope.InstanceScopeFactoryResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.InstanceScopeFactoryResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.InstanceScopeFactoryResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.InstanceScopeFactoryResources.UnknownScope">
            <summary>
              Looks up a localized string similar to The provides scope &apos;{0}&apos; was not recognised..
            </summary>
        </member>
        <member name="T:Autofac.Context">
            <summary>
            Provides dependency resolution during a single resolve operation.
            </summary>
        </member>
        <member name="T:Autofac.IContext">
            <summary>
            The context in which a service can be accessed or a component's
            dependencies resolved. Disposal of a context will dispose any owned
            components.
            </summary>
            <remarks>
            This interface is intended to be the lowest-common-denominator between
            IoC containers - the Autofac-specific features are generally available
            through the Container class only. By restricting wider application access
            to this interface, an application can remain compatible with other
            containers and be adapted to them via this interface if necessary.
            </remarks>
        </member>
        <member name="M:Autofac.IContext.Resolve``1(Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <returns>The component instance that provides the service.</returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve``1(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve(System.Type,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceName">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve(Autofac.Service,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve``1(``0@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve(System.Type,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve(System.String,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="componentName">The name of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve(Autofac.Service,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The key of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.ResolveOptional``1(Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available.
            </returns>
            <remarks>Useful with the C#3 initialiser syntax.</remarks>
            <example>
            container.Register&lt;ISomething&gt;(c =&gt; new Something(){ AProperty = c.ResolveOptional&lt;IOptional&gt;() });
            </example>
        </member>
        <member name="M:Autofac.IContext.Resolve``1(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <returns>The component instance that provides the service.</returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve``1(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve(System.Type,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceName">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.Resolve(Autofac.Service,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve``1(``0@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve(System.Type,System.Object@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve(System.String,System.Object@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="componentName">The name of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.TryResolve(Autofac.Service,System.Object@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The key of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.IContext.ResolveOptional``1(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available.
            </returns>
            <remarks>Useful with the C#3 initializer syntax.</remarks>
            <example>
            container.Register&lt;ISomething&gt;(c =&gt; new Something(){ AProperty = c.ResolveOptional&lt;IOptional&gt;() });
            </example>
        </member>
        <member name="M:Autofac.IContext.ResolveOptional``1(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container
            </summary>
            <typeparam name="TService">The type of the service to retrieve.</typeparam>
            <param name="serviceName">Name of the service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available
            </returns>
        </member>
        <member name="M:Autofac.IContext.ResolveOptional``1(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container
            </summary>
            <typeparam name="TService">The type of the service to retrieve.</typeparam>
            <param name="serviceName">Name of the service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available
            </returns>
        </member>
        <member name="M:Autofac.IContext.IsRegistered(System.Type)">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <param name="serviceType">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.IContext.IsRegistered(System.String)">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <param name="serviceName">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.IContext.IsRegistered(Autofac.Service)">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <param name="service">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.IContext.IsRegistered``1">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <typeparam name="TService">The service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.IContext.InjectProperties``1(``0)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved by the container. (Generally use <see cref="M:Autofac.IContext.InjectUnsetProperties``1(``0)"/>
            unless you're using the Null Object pattern for unset dependencies.)
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.IContext.InjectUnsetProperties``1(``0)">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="F:Autofac.Context.MaxResolveDepth">
            <summary>
            Catch circular dependencies that are triggered by post-resolve processing (e.g. 'OnActivated')
            </summary>
        </member>
        <member name="F:Autofac.Context.Empty">
            <summary>
            A context with no registered components.
            </summary>
        </member>
        <member name="F:Autofac.Context._componentResolutionStack">
            <summary>
            For the duration of a single resolve operation, tracks the services
            that have been requested.
            </summary>
        </member>
        <member name="M:Autofac.Context.#ctor(Autofac.IRegistrationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Context"/> class.
            </summary>
            <param name="registrationContext">The container from which to draw component registrations.</param>
        </member>
        <member name="M:Autofac.Context.Resolve``1(Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.Resolve``1(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.Resolve(Autofac.Service,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.Resolve(System.Type,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.Resolve(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceName">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.ResolveOptional``1(Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available.
            </returns>
            <remarks>Useful with the C#3 initialiser syntax.</remarks>
            <example>
            container.Register&lt;ISomething&gt;(c =&gt; new Something(){ AProperty = c.ResolveOptional&lt;IOptional&gt;() });
            </example>
        </member>
        <member name="M:Autofac.Context.ResolveOptional``1(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container
            </summary>
            <typeparam name="TService">The type of the service to retrieve.</typeparam>
            <param name="serviceName">Name of the service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available
            </returns>
        </member>
        <member name="M:Autofac.Context.ResolveOptional``1(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container
            </summary>
            <typeparam name="TService">The type of the service to retrieve.</typeparam>
            <param name="serviceName">Name of the service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available
            </returns>
        </member>
        <member name="M:Autofac.Context.TryResolve``1(``0@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.TryResolve(System.Type,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.TryResolve(System.String,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="componentName">The name of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.TryResolve(Autofac.Service,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The key of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Context.IsRegistered(Autofac.Service)">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <param name="service">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Context.IsRegistered(System.Type)">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <param name="serviceType">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Context.IsRegistered(System.String)">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <param name="serviceName">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Context.IsRegistered``1">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <typeparam name="TService">The service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Context.InjectUnsetProperties``1(``0)">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
            <remarks>
            Inspect all public writeable properties and inject
            values from the container if available. For factory-lifecycle components
            a speed improvement could be had here by caching the property-value
            pairs.
            </remarks>
        </member>
        <member name="M:Autofac.Context.InjectProperties``1(``0)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved by the container. (Generally use <see cref="M:Autofac.Context.InjectUnsetProperties``1(``0)"/>
            unless you're using the Null Object pattern for unset dependencies.)
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.Context.InjectProperties``1(``0,System.Boolean)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <param name="overrideSetValues">If set to <c>true</c> any properties with existing
            values will be overwritten.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="T:Autofac.Context.Activation">
            <summary>
            Tracks activation events that need to be fired.
            </summary>
        </member>
        <member name="T:Autofac.ContextResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ContextResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ContextResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ContextResources.CircularDependency">
            <summary>
              Looks up a localized string similar to Circular component dependency detected: {0}..
            </summary>
        </member>
        <member name="P:Autofac.ContextResources.MaxDepthExceeded">
            <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:Autofac.DependencyResolutionExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.DependencyResolutionExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.DependencyResolutionExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.DependencyResolutionExceptionResources.DefaultMessage">
            <summary>
              Looks up a localized string similar to A required component could not be created..
            </summary>
        </member>
        <member name="T:Autofac.Disposer">
            <summary>
            Maintains a set of objects to dispose, and disposes them in the reverse order
            from which they were added when the Disposer is itself disposed.
            </summary>
        </member>
        <member name="T:Autofac.IDisposer">
            <summary>
            Provided on an object that will dispose of other objects when it is
            itself disposed.
            </summary>
        </member>
        <member name="M:Autofac.IDisposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="F:Autofac.Disposer._items">
            <summary>
            Contents all implement IDisposable.
            </summary>
        </member>
        <member name="M:Autofac.Disposer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Disposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Autofac.Enforce">
            <summary>
            Helper methods used throughout the codebase.
            </summary>
        </member>
        <member name="M:Autofac.Enforce.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Enforce.NotNull``1(``0)">
            <summary>
            Enforces that the provided object is non-null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Enforce.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Enforce that an argument is not null or empty. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Enforce.ArgumentTypeIsFunction(System.Type)">
            <summary>
            Enforce that the argument is a delegate type.
            </summary>
            <param name="delegateType">The type to test.</param>
        </member>
        <member name="T:Autofac.EnforceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.EnforceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.EnforceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.EnforceResources.CannotBeEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; cannot be empty..
            </summary>
        </member>
        <member name="P:Autofac.EnforceResources.CannotBeNull">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:Autofac.EnforceResources.DelegateReturnsVoid">
            <summary>
              Looks up a localized string similar to Type {0} returns void..
            </summary>
        </member>
        <member name="P:Autofac.EnforceResources.NotDelegate">
            <summary>
              Looks up a localized string similar to Type {0} is not a delegate type..
            </summary>
        </member>
        <member name="T:Autofac.UndoAction">
            <summary>
            An UndoAction cleans up when a guard is not dismissed (e.g. in the
            event of an exception.)
            </summary>
        </member>
        <member name="T:Autofac.Guard">
            <summary>
            A Guard stores a stack of <see cref="T:Autofac.UndoAction"/>s that it will execute
            if it is disposed before it is dismissed.
            </summary>
            <example>
            var i = 2;
            using (var guard = new Guard())
            {
              var oldI = i;
              guard.Add(() =&gt; i = oldI);
              
              i = 3;
              
              // guard.Dismiss() should be called here
            }
            
            // i will be reset to 2 by the guard.
            </example>
        </member>
        <member name="M:Autofac.Guard.#ctor">
            <summary>
            Create a guard with an empty undo stack.
            </summary>
        </member>
        <member name="M:Autofac.Guard.#ctor(Autofac.UndoAction)">
            <summary>
            Create a guard with an initial undo action.
            </summary>
            <param name="undoAction">The undo action.</param>
        </member>
        <member name="M:Autofac.Guard.Dismiss">
            <summary>
            Dismiss the guard, so that it can be disposed
            without the undo actions being executed.
            </summary>
        </member>
        <member name="M:Autofac.Guard.Add(Autofac.UndoAction)">
            <summary>
            Add an action to the undo stack.
            </summary>
            <param name="undoAction">The action to perform in the event of an undo.</param>
        </member>
        <member name="M:Autofac.Guard.Dispose(System.Boolean)">
            <summary>
            Dispose of managed and unmanaged resources.
            </summary>
            <param name="disposing">If false, this object is being garbage collected.</param>
        </member>
        <member name="T:Autofac.GuardResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.GuardResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.GuardResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.GuardResources.AlreadyDismissed">
            <summary>
              Looks up a localized string similar to The guard has already been dismissed..
            </summary>
        </member>
        <member name="T:Autofac.IContainer">
            <summary>
            Provides the full Autofac container functionality.
            </summary>
            <remarks>
            It is recommended that in most instances the more limited IContext interface is 
            used instead, as this is easier to implement on top of a different back-end, e.g. a
            customised or alternative container.
            </remarks>
        </member>
        <member name="M:Autofac.IContainer.CreateInnerContainer">
            <summary>
            Begin a new sub-context. Contextual and transient instances created inside
            the subcontext will be disposed along with it.
            </summary>
            <returns>A new subcontext.</returns>
        </member>
        <member name="M:Autofac.IContainer.RegisterComponent(Autofac.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">A component registration.</param>
        </member>
        <member name="M:Autofac.IContainer.AddRegistrationSource(Autofac.IRegistrationSource)">
            <summary>
            Add a source from which registrations may be retrieved in the case that they
            are not available in the container.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Autofac.IContainer.TryGetDefaultRegistrationFor(Autofac.Service,Autofac.IComponentRegistration@)">
            <summary>
            Gets the default component registration that will be used to satisfy
            requests for the provided service.
            </summary>
            <param name="service">The service.</param>
            <param name="registration">The registration.</param>
            <returns>True if a default exists, false otherwise.</returns>
        </member>
        <member name="M:Autofac.IContainer.TagWith``1(``0)">
            <summary>
            Tags the container with the provided value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag applied to this container and the contexts genrated when
            it resolves component dependencies.</param>
        </member>
        <member name="P:Autofac.IContainer.Disposer">
            <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Autofac.IContainer.OuterContainer">
            <summary>
            If the container is an inner container, retrieves the outer container.
            Otherwise, null;
            </summary>
        </member>
        <member name="P:Autofac.IContainer.ComponentRegistrations">
            <summary>
            The registrations for all of the components registered with the container.
            </summary>
        </member>
        <member name="E:Autofac.IContainer.ComponentRegistered">
            <summary>
            Fired whenever a component is registed into the container.
            </summary>
        </member>
        <member name="T:Autofac.IRegistrationContext">
            <summary>
            Allows registrations to be accessed by the resolve infrastructure.
            </summary>
        </member>
        <member name="M:Autofac.IRegistrationContext.TryGetRegistration(Autofac.Service,Autofac.IComponentRegistration@,Autofac.IDisposer@,Autofac.IContext@)">
            <summary>
            Gets a registration from the container by key.
            </summary>
            <param name="key">The key for the registration (name or generated service key.)</param>
            <param name="registration">The registration result.</param>
            <param name="disposer">The disposer that should be used to dispose of instances activated by
            the registration.</param>
            <param name="context">The context that should be used when activating
            instances from the registration, or null if these instances can be
            activated in the current context.</param>
            <returns>True if the registration exists.</returns>
        </member>
        <member name="M:Autofac.IRegistrationContext.TryGetLocalRegistration(Autofac.Service,Autofac.IComponentRegistration@,Autofac.IDisposer@)">
            <summary>
            Gets a registration from the specific outer container by key.
            </summary>
            <param name="key">The key for the registration (name or generated service key.)</param>
            <param name="registration">The registration result.</param>
            <param name="disposer">The disposer that should be used to dispose of instances activated by
            the registration.</param>
            <returns>True if the registration exists.</returns>
        </member>
        <member name="T:Autofac.InstanceOwnership">
            <summary>
            Determines when instances supporting IDisposable are disposed.
            </summary>
        </member>
        <member name="F:Autofac.InstanceOwnership.External">
            <summary>
            The container/context does not dispose the instances.
            </summary>
        </member>
        <member name="F:Autofac.InstanceOwnership.Container">
            <summary>
            The instances are disposed when the container/context is disposed.
            </summary>
        </member>
        <member name="T:Autofac.InstanceScope">
            <summary>
            Determines when instances are created and how they are shared.
            </summary>
        </member>
        <member name="F:Autofac.InstanceScope.Singleton">
            <summary>
            Each request for an instance will return the same object, regardless
            of any subcontexts created.
            </summary>
        </member>
        <member name="F:Autofac.InstanceScope.Container">
            <summary>
            Each request for an instance in the same container will return the same object.
            </summary>
        </member>
        <member name="F:Autofac.InstanceScope.Factory">
            <summary>
            Each request for an instance will return a new object.
            </summary>
        </member>
        <member name="T:Autofac.Builder.ContainerBuilder">
            <summary>
            Used to incrementally build component registrations.
            </summary>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.SetDefaultOwnership(Autofac.InstanceOwnership)">
            <summary>
            Set the default <see cref="T:Autofac.InstanceOwnership"/> for new registrations. Registrations
            already made will not be affected by changes in this value.
            </summary>
            <param name="ownership">The new default ownership.</param>
            <returns>An object that when disposed, will restore the original default ownership.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.SetDefaultScope(Autofac.InstanceScope)">
            <summary>
            Set the default <see cref="T:Autofac.InstanceScope"/> for new registrations. Registrations
            already made will not be affected by changes in this value.
            </summary>
            <returns>An object that when disposed, will restore the original default scope.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterModule(Autofac.IModule)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterComponent(Autofac.IComponentRegistration)">
            <summary>
            Register a component using a component registration.
            </summary>
            <param name="registration"></param>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Build">
            <summary>
            Create a new container with the registrations that have been built so far.
            </summary>
            <remarks>
            Build can only be called once per ContainerBuilder - this prevents lifecycle
            issues for provided instances.
            </remarks>
            <returns>A new container with the registrations made.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Build(Autofac.IContainer)">
            <summary>
            Configure an existing container with the registrations that have been built so far.
            </summary>
            <remarks>
            Build can only be called once per ContainerBuilder - this prevents lifecycle
            issues for provided instances.
            </remarks>
            <param name="container">An existing container to make the registrations in.</param>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.AttachRegistrar``1(Autofac.Registrars.Registrar{``0})">
            <summary>
            Attach the registrar to the builder (register it as a module) and
            set defaults as necessary.
            </summary>
            <param name="registrar"></param>
            <returns></returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterGeneric(System.Type)">
            <summary>
            Register an un-parameterised generic type, e.g. <code>Repository&lt;&gt;</code>.
            Concrete types will be made as they are requested, e.g. with <code>Resolve&lt;Repository&lt;int&gt;&gt;()</code>.
            </summary>
            <param name="implementor">The implementor.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Register``1">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>A registrar allowing details of the registration to be customised.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Register(System.Type)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <param name="implementor">The type of the component.</param>
            <returns>
            A registrar allowing details of the registration to be customised.
            </returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterTypesMatching(System.Predicate{System.Type})">
            <summary>
            Registers the types matching.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterTypesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Registers the types from assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterTypesAssignableTo``1">
            <summary>
            Registers the types assignable to.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterCollection``1">
            <summary>
            Registers the type as a collection. If no services or names are specified, the
            default service will be IEnumerable&lt;T&gt;();
            </summary>
            <typeparam name="T">Collection item type</typeparam>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.RegisterCollection(System.Type)">
            <summary>
            Registers the type as a collection. If no services or names are specified, the
            default service will be IEnumerable&lt;T&gt;();
            </summary>
            <param name="collectionType">Collection item type</param>
            <returns>A registrar allowing configuration to continue.</returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Register``1(Autofac.Registrars.Delegate.ComponentActivator{``0})">
            <summary>
            Register a component that will be created using a provided delegate.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="creator">The creator.</param>
            <returns>
            A registrar allowing details of the registration to be customised.
            </returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Register``1(Autofac.Registrars.Delegate.ComponentActivatorWithParameters{``0})">
            <summary>
            Register a component that will be created using a provided delegate.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="creator">The creator.</param>
            <returns>
            A registrar allowing details of the registration to be customised.
            </returns>
        </member>
        <member name="M:Autofac.Builder.ContainerBuilder.Register``1(``0)">
            <summary>
            Register a component using a provided instance.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="instance">The instance.</param>
            <returns>
            A registrar allowing details of the registration to be customised.
            </returns>
        </member>
        <member name="P:Autofac.Builder.ContainerBuilder.DefaultOwnership">
            <summary>
            The default <see cref="T:Autofac.InstanceOwnership"/> for new registrations.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ContainerBuilder.DefaultScope">
            <summary>
            The default <see cref="T:Autofac.InstanceScope"/> for new registrations.
            </summary>
        </member>
        <member name="T:Autofac.Registrars.Delegate.DelegateRegistrar">
            <summary>
            Register a component using a delegate.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Delegate.DelegateRegistrar.#ctor(System.Type,Autofac.Component.ComponentActivator)">
            <summary>
            Initializes a new instance of the DelegateRegistrar&lt;TComponent&gt; class.
            </summary>
            <param name="implementor">The implementor.</param>
            <param name="creator">The creator.</param>
        </member>
        <member name="M:Autofac.Registrars.Delegate.DelegateRegistrar.CreateActivator">
            <summary>
            Creates the activator for the registration.
            </summary>
            <returns>An activator.</returns>
        </member>
        <member name="P:Autofac.Registrars.Delegate.DelegateRegistrar.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar">
            <summary>
            Register a component using a provided instance.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar"/> class.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="defaultService">The default service.</param>
        </member>
        <member name="M:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar.CreateActivator">
            <summary>
            Creates the activator for the registration.
            </summary>
            <returns>An activator.</returns>
        </member>
        <member name="M:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar.WithScope(Autofac.InstanceScope)">
            <summary>
            Change the scope associated with the registration.
            This determines how instances are tracked and shared.
            </summary>
            <param name="scope">The scope model to use.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar.DoConfigure(Autofac.IContainer)">
            <summary>
            Resolves issue #7 - Provided instances not disposed unless they are resolved
            first. Manually attaches instance to container's disposer if Container ownership
            is chosen.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Autofac.Registrars.ProvidedInstance.ProvidedInstanceRegistrar.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Registrars.Reflective.ReflectiveRegistrar">
            <summary>
            Register a component to be created through reflection.
            </summary>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.Reflective.ReflectiveRegistrar"/> class.
            </summary>
            <param name="implementor">The implementation type.</param>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.UsingConstructor(System.Type[])">
            <summary>
            Enforce that the specific constructor with the provided signature is used.
            </summary>
            <param name="ctorSignature">The types that designate the constructor to use.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.WithArguments(Autofac.Parameter[])">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.WithArguments(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Associates constructor parameters with default values.
            </summary>
            <param name="additionalCtorArgs">The named values to apply to the constructor.
            These may be overriden by supplying any/all values to the IContext.Resolve() method.</param>
            <returns>
            A registrar allowing registration to continue.
            </returns>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.WithProperties(System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns></returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.WithProperties(Autofac.NamedPropertyParameter[])">
            <summary>
            Provide explicit property values to be set on the new object.
            </summary>
            <param name="explicitProperties"></param>
            <returns>A registrar allowing configuration to continue.</returns>
            <remarks>Note, supplying a null value will not prevent property injection if
            property injection is done through an OnActivating handler.</remarks>
        </member>
        <member name="M:Autofac.Registrars.Reflective.ReflectiveRegistrar.CreateActivator">
            <summary>
            Creates the activator for the registration.
            </summary>
            <returns>An activator.</returns>
        </member>
        <member name="P:Autofac.Registrars.Reflective.ReflectiveRegistrar.Syntax">
            <summary>
            Returns this instance, correctly-typed.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Registrars.ConcreteRegistrarResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.ConcreteRegistrarResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.ConcreteRegistrarResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Registrars.ConcreteRegistrarResources.ComponentDoesNotSupportService">
            <summary>
              Looks up a localized string similar to The component &apos;{0}&apos; does not support the service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Registrars.Generic.GenericRegistrationHandler">
            <summary>
            This class, not yet part of the public API, provides a means
            by which generic component registrations can be made.
            </summary>
            <remarks>
            This class creates registrations by handling the Container.ServiceNotRegistered
            event. This feels hacky but keeps the container cleaner and simpler. Will have
            to see how performance goes.
            </remarks>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrationHandler.#ctor(System.Collections.Generic.IEnumerable{Autofac.Service},System.Type,Autofac.Registrars.DeferredRegistrationParameters,Autofac.Component.Activation.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Registrars.Generic.GenericRegistrationHandler"/> class.
            </summary>
            <param name="services">The services.</param>
            <param name="implementor">The implementor.</param>
            <param name="deferredParams">The deferred params.</param>
            <param name="constructorSelector">The constructor selector.</param>
            <param name="arguments">Additional arguments to supply to the component's constructor.</param>
            <param name="properties">Additional properties to set on the component.</param>
        </member>
        <member name="M:Autofac.Registrars.Generic.GenericRegistrationHandler.TryGetImplementation(Autofac.Service,System.Type@,System.Collections.Generic.IEnumerable{Autofac.Service}@)">
            <summary>
            Determine if the service represents a type that can be registered, and if so,
            retrieve that type as well as the services that the registration should expose.
            </summary>
            <param name="service">The service.</param>
            <param name="implementor">The implementation type.</param>
            <param name="services">The services.</param>
            <returns>True if a registration can be made.</returns>
        </member>
        <member name="T:Autofac.Configuration.ModuleElement">
            <summary>
            Element describing a module registration.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ModuleElement.Type">
            <summary>
            Gets the type of the module. Must expose <see cref="T:Autofac.IModule"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Autofac.Configuration.ModuleElement.Parameters">
            <summary>
            Gets the parameters used to construct the component.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Autofac.Configuration.ModuleElement.ExplicitProperties">
            <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
            <value>The explicit properties.</value>
        </member>
        <member name="T:Autofac.Configuration.ModuleElementCollection">
            <summary>
            A collection of module elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ModuleElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ModuleElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Builder.Module">
            <summary>
            Base class for user-defined modules. Implements IModule on top
            of ContainerBuilder.
            </summary>
        </member>
        <member name="M:Autofac.Builder.Module.Configure(Autofac.IContainer)">
            <summary>
            Apply the module to the container.
            </summary>
            <param name="container">Container to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Builder.Module.Load(Autofac.Builder.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Autofac.Builder.Module.AttachToComponentRegistration(Autofac.IContainer,Autofac.IComponentRegistration)">
            <summary>
            Attach the module to a registration either already existing in
            or being registered in the container.
            </summary>
            <param name="container">The container.</param>
            <param name="registration">The registration.</param>
        </member>
        <member name="T:Autofac.NamedService">
            <summary>
            Identifies a service using a textual name.
            </summary>
        </member>
        <member name="T:Autofac.Service">
            <summary>
            Services are the lookup keys used to locate component instances.
            </summary>
        </member>
        <member name="M:Autofac.Service.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Autofac.Service.op_Equality(Autofac.Service,Autofac.Service)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Autofac.Service.op_Inequality(Autofac.Service,Autofac.Service)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Autofac.Service.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Service.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Service.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Autofac.NamedService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.NamedService"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:Autofac.NamedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.NamedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.NamedService.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Autofac.NamedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Autofac.Configuration.ComponentElement">
            <summary>
            Element describing a component registration.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Type">
            <summary>
            Gets the type of the component.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Service">
            <summary>
            Gets the service exposed by the component. For multiple-service components,
            use the services element instead.
            </summary>
            <value>The service.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.MemberOf">
            <summary>
            Allows the component to be added to another composite component.
            </summary>
            <value>The name of the composite component.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Name">
            <summary>
            Allows the component to be added to another composite component.
            </summary>
            <value>The name of the composite component.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Scope">
            <summary>
            Sets the scope of the component instances.
            </summary>
            <value>singleton (default,) factory or container.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Ownership">
            <summary>
            Sets the ownership over the component instances.
            </summary>
            <value>container (default) or external.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.InjectProperties">
            <summary>
            Sets up property injection for the component instances. This uses the
            OnActivated event so that circular dependencies can be handled.
            </summary>
            <value>never (default,) all, unset.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Services">
            <summary>
            Gets the services exposed by the component.
            </summary>
            <value>The services.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.Parameters">
            <summary>
            Gets the parameters used to construct the component.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.ExplicitProperties">
            <summary>
            Gets the properties to be explicitly set on the component.
            </summary>
            <value>The explicit properties.</value>
        </member>
        <member name="P:Autofac.Configuration.ComponentElement.ExtendedProperties">
            <summary>
            Gets the extended properties associated with the registration.
            </summary>
            <value>The extended properties.</value>
        </member>
        <member name="T:Autofac.Configuration.ComponentElementCollection">
            <summary>
            A collection of component elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ComponentElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ComponentElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Configuration.ConfigurationSettingsReader">
            <summary>
            Configures containers based upon app.config settings.
            </summary>
        </member>
        <member name="F:Autofac.Configuration.ConfigurationSettingsReader.DefaultSectionName">
            <summary>
            The default section name that will be searched for.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/> class.
            The reader will look for a 'autofac' section.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/> class.
            </summary>
            <param name="sectionName">Name of the configuration section.</param>
            <param name="configurationFile">The configuration file.</param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ConfigurationSettingsReader"/> class.
            </summary>
            <param name="sectionName">Name of the configuration section.</param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.Load(Autofac.Builder.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.SetInjectProperties(Autofac.Configuration.ComponentElement,Autofac.Registrars.IReflectiveRegistrar)">
            <summary>
            Sets the property injection mode for the component.
            </summary>
            <param name="component">The component.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.SetOwnership(Autofac.Configuration.ComponentElement,Autofac.Registrars.IReflectiveRegistrar)">
            <summary>
            Sets the ownership model of the component.
            </summary>
            <param name="component">The component.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.SetScope(Autofac.Configuration.ComponentElement,Autofac.Registrars.IReflectiveRegistrar)">
            <summary>
            Sets the scope model for the component.
            </summary>
            <param name="component">The component.</param>
            <param name="registrar">The registrar.</param>
        </member>
        <member name="M:Autofac.Configuration.ConfigurationSettingsReader.LoadType(System.String,System.Reflection.Assembly)">
            <summary>
            Loads the type.
            </summary>
            <param name="typeName">Name of the type.</param>
            <param name="defaultAssembly">The default assembly.</param>
            <returns></returns>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReader.SectionHandler">
            <summary>
            Gets the section handler.
            </summary>
            <value>The section handler.</value>
        </member>
        <member name="T:Autofac.Configuration.ConfigurationSettingsReaderResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.SectionNotFound">
            <summary>
              Looks up a localized string similar to The configuration section &apos;{0}&apos; could not be read..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.TypeNotFound">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; could not be found. It may require assembly qualification, e.g. &quot;MyType, MyAssembly&quot;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedInjectProperties">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the inject-properties attribute. Valid values are &apos;never&apos;, &apos;all&apos; and &apos;unset&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedOwnership">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the ownership attribute. Valid values are &apos;container&apos; and &apos;external&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ConfigurationSettingsReaderResources.UnrecognisedScope">
            <summary>
              Looks up a localized string similar to The value &apos;{0}&apos; is not valid for the scope attribute. Valid values are &apos;singleton&apos;, &apos;factory&apos; and &apos;container&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Configuration.ParameterElement">
            <summary>
            Element describing a component constructor parameter.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ParameterElement.Name">
            <summary>
            Gets the name of the parameter.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Autofac.Configuration.ParameterElement.Value">
            <summary>
            Gets the value used to set the parameter (type will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Autofac.Configuration.ParameterElementCollection">
            <summary>
            A collection of parameter elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ParameterElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ParameterElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ParameterElementCollection.ToParameters">
            <summary>
            Convert to the Autofac parameter type.
            </summary>
            <returns>The parameters represented by this collection.</returns>
        </member>
        <member name="T:Autofac.Configuration.PropertyElement">
            <summary>
            Element describing a component property.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.PropertyElement.Name">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Autofac.Configuration.PropertyElement.Value">
            <summary>
            Gets the value to be set (will be converted.)
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Autofac.Configuration.PropertyElementCollection">
            <summary>
            Collection of property elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.PropertyElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.PropertyElementCollection"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.PropertyElementCollection.ToParameters">
            <summary>
            Convert to the Autofac parameter type.
            </summary>
            <returns>The parameters represented by this collection.</returns>
        </member>
        <member name="T:Autofac.Configuration.SectionHandler">
            <summary>
            Section handler for Autofac configuration in app.config files.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.Modules">
            <summary>
            Gets the modules to be registered.
            </summary>
            <value>The modules.</value>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.Components">
            <summary>
            Gets the components to be registered.
            </summary>
            <value>The components.</value>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.Files">
            <summary>
            Gets additional configuration files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="P:Autofac.Configuration.SectionHandler.DefaultAssembly">
            <summary>
            Gets the default assembly to search for types in when not explicitly
            provided with the type name.
            </summary>
            <value>The default assembly.</value>
        </member>
        <member name="T:Autofac.Configuration.ServiceElement">
            <summary>
            Element describing a service exposed by a component.
            </summary>
        </member>
        <member name="P:Autofac.Configuration.ServiceElement.Type">
            <summary>
            Gets the service type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Autofac.Configuration.ServiceElementCollection">
            <summary>
            A collection of service elements.
            </summary>
        </member>
        <member name="M:Autofac.Configuration.ServiceElementCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Configuration.ServiceElementCollection"/> class.
            </summary>
        </member>
        <member name="T:Autofac.Container">
            <summary>
            Standard container implementation.
            </summary>
        </member>
        <member name="F:Autofac.Container._synchRoot">
            <summary>
            Protects instance variables from concurrent access.
            </summary>
        </member>
        <member name="F:Autofac.Container._defaultRegistrations">
            <summary>
            Associates each service with the default registration that
            can provide that service.
            </summary>
        </member>
        <member name="F:Autofac.Container._outerContainer">
            <summary>
            Supports nested containers.
            </summary>
        </member>
        <member name="F:Autofac.Container._registrationSources">
            <summary>
            External registration sources.
            </summary>
        </member>
        <member name="F:Autofac.Container._disposer">
            <summary>
            Disposer that handles disposal of instances attached to the container.
            </summary>
        </member>
        <member name="F:Autofac.Container.SelfRegistrationDescriptor">
            <summary>
            When creating inner containers the construction of the descriptor was previously
            the most expensive operation - using a shared descriptor eliminates this.
            </summary>
        </member>
        <member name="F:Autofac.Container.Empty">
            <summary>
            A container with no component registrations.
            </summary>
        </member>
        <member name="M:Autofac.Container.#cctor">
            <summary>
            Initialises the <see cref="T:Autofac.Container"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Container.#ctor">
            <summary>
            Create a new container.
            </summary>
        </member>
        <member name="M:Autofac.Container.#ctor(Autofac.Container)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Container"/> class.
            </summary>
            <param name="outerScope">The outer scope.</param>
        </member>
        <member name="M:Autofac.Container.CreateInnerContainer">
            <summary>
            Begin a new sub-context. Contextual and transient instances created inside
            the subcontext will be disposed along with it.
            </summary>
            <returns>A new subcontext.</returns>
        </member>
        <member name="M:Autofac.Container.RegisterComponent(Autofac.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">A component registration.</param>
        </member>
        <member name="M:Autofac.Container.RegisterComponentInternal(Autofac.IComponentRegistration,Autofac.Service)">
            <summary>
            Registers the component, restricting its provided services to 'specificService' in order
            to protect pre-existing defaults if necessary.
            </summary>
            <param name="registration">The registration.</param>
            <param name="specificService">The specific service or null.</param>
        </member>
        <member name="M:Autofac.Container.AddRegistrationSource(Autofac.IRegistrationSource)">
            <summary>
            Add a source from which registrations may be retrieved in the case that they
            are not available in the container.
            </summary>
            <param name="registrationSource"></param>
        </member>
        <member name="M:Autofac.Container.TryGetDefaultRegistrationFor(Autofac.Service,Autofac.IComponentRegistration@)">
            <summary>
            Gets the default component registration that will be used to satisfy
            requests for the provided service.
            </summary>
            <param name="service">The service.</param>
            <param name="registration">The registration.</param>
            <returns>
            True if a default exists, false otherwise.
            </returns>
        </member>
        <member name="M:Autofac.Container.TagWith``1(``0)">
            <summary>
            Enables context tagging in the container.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag">The tag applied to this container and the contexts genrated when
            it resolves component dependencies.</param>
        </member>
        <member name="M:Autofac.Container.Autofac#IRegistrationContext#TryGetRegistration(Autofac.Service,Autofac.IComponentRegistration@,Autofac.IDisposer@,Autofac.IContext@)">
            <summary>
            Gets a registration from the container by key.
            </summary>
            <param name="key">The key for the registration (name or generated service key.)</param>
            <param name="registration">The registration result.</param>
            <param name="disposer">The disposer that should be used to dispose of instances activated by
            the registration.</param>
            <param name="context">The context that should be used when activating instances from the
            registration.</param>
            <returns></returns>
            <remarks>
            This method has gotten a bit gnarly. It might help to replace the three 'out' parameters
            with a single structure, though usage in Context doesn't really point that way.
            </remarks>
        </member>
        <member name="M:Autofac.Container.Autofac#IRegistrationContext#TryGetLocalRegistration(Autofac.Service,Autofac.IComponentRegistration@,Autofac.IDisposer@)">
            <summary>
            Gets a registration from the specific outer container by key.
            </summary>
            <param name="key">The key for the registration (name or generated service key.)</param>
            <param name="registration">The registration result.</param>
            <param name="disposer">The disposer that should be used to dispose of instances activated by
            the registration.</param>
            <returns>True if a registration is available.</returns>
        </member>
        <member name="M:Autofac.Container.TryGetRegistrationFromSources(Autofac.Service,Autofac.IComponentRegistration@)">
            <summary>
            Searches for an IRegistrationSource that can provide a registration for an
            unregistered service, and completes the registration process if possible.
            </summary>
            <param name="key">The requested service.</param>
            <param name="registration">The registration for that service.</param>
            <returns>
            True if a registration was provided, otherwise, false.
            </returns>
        </member>
        <member name="M:Autofac.Container.TryExportToNewContext(Autofac.Service,Autofac.IComponentRegistration@)">
            <summary>
            Create an IComponentRegistration for a new subcontext if available.
            </summary>
            <param name="key">The service that was requested. Note that any
            additional services provided by the component will also be exported.</param>
            <param name="registration">The new registration.</param>
            <returns>True if the new context could be supported.</returns>
        </member>
        <member name="M:Autofac.Container.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Container.CreateResolutionContext">
            <summary>
            Creates the context for a single resolve operation.
            </summary>
            <returns>The context.</returns>
        </member>
        <member name="M:Autofac.Container.Resolve``1(Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters"></param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve``1(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve(System.Type,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceName">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve(Autofac.Service,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The service to retrieve.</param>
            <param name="parameters"></param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve``1(``0@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters"></param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve(System.Type,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters"></param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.ResolveOptional``1(Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters"></param>
            <returns>
            The component instance that provides the service, or null if
            none is available.
            </returns>
            <remarks>Useful with the C#3 initialiser syntax.</remarks>
            <example>
            container.Register&lt;ISomething&gt;(c =&gt; new Something(){ AProperty = c.ResolveOptional&lt;IOptional&gt;() });
            </example>
        </member>
        <member name="M:Autofac.Container.ResolveOptional``1(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container
            </summary>
            <typeparam name="TService">The type of the service to retrieve.</typeparam>
            <param name="serviceName">Name of the service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available
            </returns>
        </member>
        <member name="M:Autofac.Container.ResolveOptional``1(System.String,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container
            </summary>
            <typeparam name="TService">The type of the service to retrieve.</typeparam>
            <param name="serviceName">Name of the service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available
            </returns>
        </member>
        <member name="M:Autofac.Container.Resolve``1(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters"></param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve``1(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve(System.Type,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve(System.String,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceName">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.Resolve(Autofac.Service,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The service to retrieve.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve``1(``0@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve(System.Type,System.Object@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="serviceType">The service to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve(System.String,System.Object@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="componentName">The name of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve(Autofac.Service,System.Object@,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The key of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.ResolveOptional``1(System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service, or null if
            none is available.
            </returns>
            <remarks>Useful with the C#3 initialiser syntax.</remarks>
            <example>
            container.Register&lt;ISomething&gt;(c =&gt; new Something(){ AProperty = c.ResolveOptional&lt;IOptional&gt;() });
            </example>
        </member>
        <member name="M:Autofac.Container.IsRegistered(System.Type)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service.</param>
            <returns>
            	<c>true</c> if the specified service is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Autofac.Container.IsRegistered(System.String)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="name">The service.</param>
            <returns>
            	<c>true</c> if the specified service is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Autofac.Container.IsRegistered(Autofac.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service.</param>
            <returns>
            	<c>true</c> if the specified service is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Autofac.Container.IsRegistered``1">
            <summary>
            Determine whether or not a service has been registered.
            </summary>
            <typeparam name="TService">The service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Container.InjectProperties``1(``0)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved by the container. (Generally use <see cref="M:Autofac.Container.InjectUnsetProperties``1(``0)"/>
            unless you're using the Null Object pattern for unset dependencies.)
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.Container.InjectUnsetProperties``1(``0)">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="T">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.Container.TryResolve(System.String,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="componentName">The name of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters"></param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.TryResolve(Autofac.Service,System.Object@,Autofac.Parameter[])">
            <summary>
            Retrieve a service registered with the container.
            </summary>
            <param name="service">The key of the component to retrieve.</param>
            <param name="instance">The component instance that provides the service.</param>
            <param name="parameters"></param>
            <returns>
            True if the service was registered and its instance created;
            false otherwise.
            </returns>
            <exception cref="T:Autofac.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Container.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is 
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:Autofac.Container.Disposer">
            <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Autofac.Container.OuterContainer">
            <summary>
            If the container is an inner container, retrieves the outer container.
            Otherwise, null;
            </summary>
            <value></value>
        </member>
        <member name="P:Autofac.Container.ComponentRegistrations">
            <summary>
            The registrations for all of the components registered with the container.
            </summary>
        </member>
        <member name="E:Autofac.Container.ComponentRegistered">
            <summary>
            Fired whenever a component is registed into the container.
            </summary>
        </member>
        <member name="T:Autofac.Component.Scope.ContainerScope">
            <summary>
            Scope model tied to the lifetime of the container in which
            the instance is resolved. This is useful for items whose lifespan
            is a single web request, for instance.
            </summary>
        </member>
        <member name="T:Autofac.Component.IScope">
            <summary>
            Maintains an association between instances and
            their activation scope. This can represent per-call,
            global, thread-based, request-based or user-based scope etc.
            It is an error to call
            GetInstance() if there is no instance available. Likewise,
            it is an error to call SetInstance() when an instance
            already exists in the current scope.
            An activation scope is also responsible for disposing
            its managed instances when it is itself disposed.
            </summary>
            <remarks>
            Note that obviously an Instance property could be used
            to mimic the same behaviour, however the semantics
            would differ from that of a regular property.
            </remarks>
        </member>
        <member name="M:Autofac.Component.IScope.GetInstance">
            <summary>
            The instance corresponding to this scope.
            </summary>
            <returns>The instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            There is not instance available.</exception>
        </member>
        <member name="M:Autofac.Component.IScope.SetInstance(System.Object)">
            <summary>
            Sets the instance to be associated with the
            current activation scope.
            </summary>
            <param name="instance">The instance.</param>
            <exception cref="T:System.InvalidOperationException">There is already an instance available.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Autofac.Component.IScope.DuplicateForNewContext(Autofac.Component.IScope@)">
            <summary>
            Try to create a scope container for a new context.
            </summary>
            <param name="newScope">The duplicate.</param>
            <returns>True if the semantics of the scope model allow for new contexts.</returns>
        </member>
        <member name="P:Autofac.Component.IScope.InstanceAvailable">
            <summary>
            Returns true if there is already an instance available
            in the current activation scope.
            </summary>
        </member>
        <member name="M:Autofac.Component.Scope.ContainerScope.GetInstance">
            <summary>
            The instance corresponding to this scope.
            </summary>
            <returns>The instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            There is not instance available.</exception>
        </member>
        <member name="M:Autofac.Component.Scope.ContainerScope.SetInstance(System.Object)">
            <summary>
            Sets the instance to be associated with the
            current activation scope.
            </summary>
            <param name="instance">The instance.</param>
            <exception cref="T:System.InvalidOperationException">There is already an instance available.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Autofac.Component.Scope.ContainerScope.DuplicateForNewContext(Autofac.Component.IScope@)">
            <summary>
            Try to create a scope container for a new context.
            </summary>
            <param name="newScope">The duplicate.</param>
            <returns>
            True if the semantics of the scope model allow for new contexts.
            </returns>
        </member>
        <member name="M:Autofac.Component.Scope.ContainerScope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Scope.ContainerScope.InstanceAvailable">
            <summary>
            Returns true if there is already an instance available
            in the current activation scope.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Component.Scope.FactoryScope">
            <summary>
            Manages instances in such a way that every activation gets
            a new instance, i.e. the scope of an instance is a single activation.
            This behaviour is consistent with factory semantics.
            </summary>
        </member>
        <member name="M:Autofac.Component.Scope.FactoryScope.GetInstance">
            <summary>
            The instance corresponding to this scope.
            </summary>
            <returns>The instance.</returns>
            <exception cref="T:System.InvalidOperationException">
            There is not instance available.</exception>
        </member>
        <member name="M:Autofac.Component.Scope.FactoryScope.SetInstance(System.Object)">
            <summary>
            Sets the instance to be associated with the
            current activation scope.
            </summary>
            <param name="instance">The instance.</param>
            <exception cref="T:System.InvalidOperationException">There is already an instance available.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Autofac.Component.Scope.FactoryScope.DuplicateForNewContext(Autofac.Component.IScope@)">
            <summary>
            Try to create a scope container for a new context.
            </summary>
            <param name="newScope">The duplicate.</param>
            <returns>
            True if the semantics of the scope model allow for new contexts.
            </returns>
        </member>
        <member name="M:Autofac.Component.Scope.FactoryScope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Scope.FactoryScope.InstanceAvailable">
            <summary>
            Returns true if there is already an instance available
            in the current activation scope.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Component.Scope.FactoryScopeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.FactoryScopeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.FactoryScopeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.FactoryScopeResources.Description">
            <summary>
              Looks up a localized string similar to Factory.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.FactoryScopeResources.InstanceNotAvailable">
            <summary>
              Looks up a localized string similar to An instance is never available from a Factory activation scope. Check this condition with InstanceAvailable before calling GetInstance()..
            </summary>
        </member>
        <member name="T:Autofac.Component.ComponentActivator">
            <summary>
            Implementations of the ComponentCreationDelegate type will
            create an instance of a component, using the provided container
            to resolve its dependencies.
            </summary>
            <param name="context">The container from which the component's
            dependencies may be resolved.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <returns>An instance of the component.</returns>
            <remarks>
            A creation delegate can be used when the method of initialisation
            of a component is complex, its constructors require parameters
            that must be obtained from outside the container.
            The delegate should always return a unique instance.
            </remarks>
        </member>
        <member name="T:Autofac.Component.RegistrationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.RegistrationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.RegistrationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.RegistrationResources.ToStringFormat">
            <summary>
              Looks up a localized string similar to {0}, Activator = {1}, Scope = {2}, Ownership = {3}.
            </summary>
        </member>
        <member name="T:Autofac.Component.Activation.DelegateActivator">
            <summary>
            A component activator that uses a lazily-evaluated
            delegate/expression to create a component.
            </summary>
        </member>
        <member name="M:Autofac.Component.Activation.DelegateActivator.#ctor(Autofac.Component.ComponentActivator)">
            <summary>
            Create a DelegateActivator.
            </summary>
            <param name="creator">A creation delegate. Required.</param>
        </member>
        <member name="M:Autofac.Component.Activation.DelegateActivator.ActivateInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Create a component instance, using container
            to resolve the instance's dependencies.
            </summary>
            <param name="context">The context to use
            for dependency resolution.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <returns>
            A component instance. Note that while the
            returned value need not be created on-the-spot, it must
            not be returned more than once by consecutive calls. (Throw
            an exception if this is attempted. IActivationScope should
            manage singleton semantics.)
            </returns>
        </member>
        <member name="M:Autofac.Component.Activation.DelegateActivator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Activation.DelegateActivator.CanSupportNewContext">
            <summary>
            A 'new context' is a scope that is self-contained
            and that can dispose the components it contains before the parent
            container is disposed. If the activator is stateless it should return
            true, otherwise false.
            </summary>
            <value>
            	<c>true</c> if this instance can support a new context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Autofac.Component.Activation.DelegateActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.DelegateActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.DelegateActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.DelegateActivatorResources.CreationDelegateMustNotReturnNull">
            <summary>
              Looks up a localized string similar to The creation delegate must not return null..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.DelegateActivatorResources.DelegateActivatorTypeDoesNotSupportService">
            <summary>
              Looks up a localized string similar to An activator of type &apos;{0}&apos; does not support the service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.DelegateActivatorResources.Description">
            <summary>
              Looks up a localized string similar to Delegate.
            </summary>
        </member>
        <member name="T:Autofac.DependencyResolutionException">
            <summary>
            Problem resolving dependencies, e.g. circular references, no callable constructor etc.
            </summary>
        </member>
        <member name="M:Autofac.DependencyResolutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.DependencyResolutionException"/> class.
            </summary>
        </member>
        <member name="M:Autofac.DependencyResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Autofac.DependencyResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Autofac.DependencyResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Autofac.Component.Activation.IConstructorSelector">
            <summary>
            Used to determine which constructor will be used by the ReflectionComponentActivator
            when more than one matching constructor is found.
            </summary>
        </member>
        <member name="M:Autofac.Component.Activation.IConstructorSelector.SelectConstructor(System.Collections.Generic.ICollection{System.Reflection.ConstructorInfo})">
            <summary>
            Returns the most suitable constructor from those provided.
            </summary>
            <param name="possibleConstructors">Required. Must contain at least one item.</param>
            <returns>The most suitable constructor.</returns>
        </member>
        <member name="T:Autofac.ContainerResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.AtLeastOneService">
            <summary>
              Looks up a localized string similar to At least one service is required per component registration..
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.CollectionItemTypeRegisteredAsService">
            <summary>
              Looks up a localized string similar to The collection item type {0} has already been registered as a single-valued service. Register the collection before adding instances to it..
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.ComponentExposesServiceMultipleTimes">
            <summary>
              Looks up a localized string similar to The {0} service is exposed multiple times by the same component..
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.RegistrationNameNotUnique">
            <summary>
              Looks up a localized string similar to A component named &apos;{0}&apos; has already been registered. Component names must be unique within a container..
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.RequiredServiceNotSupported">
            <summary>
              Looks up a localized string similar to The provided registration does not support the required service..
            </summary>
        </member>
        <member name="P:Autofac.ContainerResources.ServiceTypesCannotBeNull">
            <summary>
              Looks up a localized string similar to Service types cannot be null..
            </summary>
        </member>
        <member name="T:Autofac.Component.Activation.ProvidedInstanceActivator">
            <summary>
            A component activator that returns an already-created instance.
            </summary>
            <remarks>
            The activator only works once. Subsequent calls to ActivateInstance()
            will result in a failure (this is to comply with the requirements
            of the interface.)
            </remarks>
        </member>
        <member name="M:Autofac.Component.Activation.ProvidedInstanceActivator.#ctor(System.Object)">
            <summary>
            Create a new InstanceComponentActivator that will
            return <paramref name="componentInstance"/> from ActivateInstance().
            </summary>
            <param name="componentInstance">The instance provided by this activator.</param>
        </member>
        <member name="M:Autofac.Component.Activation.ProvidedInstanceActivator.ActivateInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Create a component instance, using container
            to resolve the instance's dependencies.
            </summary>
            <param name="context">The context to use
            for dependency resolution.</param>
            <param name="parameters">Unused.</param>
            <returns>
            A component instance. Note that while the
            returned value need not be created on-the-spot, it must
            not be returned more than once by consecutive calls. (Throw
            an exception if this is attempted. IActivationScope should
            manage singleton semantics.)
            </returns>
        </member>
        <member name="M:Autofac.Component.Activation.ProvidedInstanceActivator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Activation.ProvidedInstanceActivator.CanSupportNewContext">
            <summary>
            A 'new context' is a scope that is self-contained
            and that can dispose the components it contains before the parent
            container is disposed. If the activator is stateless it should return
            true, otherwise false.
            </summary>
            <value>
            	<c>true</c> if this instance can support a new context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Autofac.Component.Activation.ProvidedInstanceActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ProvidedInstanceActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ProvidedInstanceActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ProvidedInstanceActivatorResources.Description">
            <summary>
              Looks up a localized string similar to Provided Instance.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ProvidedInstanceActivatorResources.InstanceDoesNotSupportService">
            <summary>
              Looks up a localized string similar to The component instance &apos;{0}&apos; does not support the service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ProvidedInstanceActivatorResources.SingleInstanceLifecycleRequired">
            <summary>
              Looks up a localized string similar to A component registered as an instance can only support a single-instance lifecycle model, e.g. singleton..
            </summary>
        </member>
        <member name="T:Autofac.Component.Activation.MostParametersConstructorSelector">
            <summary>
            Selects the constructor with the most parameters.
            </summary>
        </member>
        <member name="M:Autofac.Component.Activation.MostParametersConstructorSelector.SelectConstructor(System.Collections.Generic.ICollection{System.Reflection.ConstructorInfo})">
            <summary>
            Returns the most suitable constructor from those provided.
            </summary>
            <param name="possibleConstructors">Required. Must contain at least one item.</param>
            <returns>The most suitable constructor.</returns>
        </member>
        <member name="T:Autofac.Component.Activation.ReflectionActivator">
            <summary>
            A component activator that creates a new instance of a
            type using reflection to select and invoke a constructor
            based on the available service registrations.
            </summary>
        </member>
        <member name="M:Autofac.Component.Activation.ReflectionActivator.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Activation.ReflectionActivator"/> class.
            </summary>
            <param name="componentType">Type of the component.</param>
        </member>
        <member name="M:Autofac.Component.Activation.ReflectionActivator.#ctor(System.Type,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Activation.ReflectionActivator"/> class.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="additionalConstructorParameters">The additional constructor parameters.</param>
        </member>
        <member name="M:Autofac.Component.Activation.ReflectionActivator.#ctor(System.Type,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Activation.ReflectionActivator"/> class.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="additionalConstructorParameters">The additional constructor parameters.</param>
            <param name="explicitPropertySetters">The explicit property setters.</param>
        </member>
        <member name="M:Autofac.Component.Activation.ReflectionActivator.#ctor(System.Type,System.Collections.Generic.IEnumerable{Autofac.Parameter},System.Collections.Generic.IEnumerable{Autofac.NamedPropertyParameter},Autofac.Component.Activation.IConstructorSelector)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Activation.ReflectionActivator"/> class.
            </summary>
            <param name="componentType">Type of the component.</param>
            <param name="additionalConstructorParameters">The additional constructor parameters.</param>
            <param name="explicitPropertySetters">The explicit property setters.</param>
            <param name="constructorSelector">The constructor selector.</param>
        </member>
        <member name="M:Autofac.Component.Activation.ReflectionActivator.ActivateInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter})">
            <summary>
            Create a component instance, using container
            to resolve the instance's dependencies.
            </summary>
            <param name="context">The context to use
            for dependency resolution.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <returns>
            A component instance. Note that while the
            returned value need not be created on-the-spot, it must
            not be returned more than once by consecutive calls. (Throw
            an exception if this is attempted. IActivationScope should
            manage singleton semantics.)
            </returns>
        </member>
        <member name="M:Autofac.Component.Activation.ReflectionActivator.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivator.CanSupportNewContext">
            <summary>
            A 'new context' is a scope that is self-contained
            and that can dispose the components it contains before the parent
            container is disposed. If the activator is stateless it should return
            true, otherwise false.
            </summary>
            <value>
            	<c>true</c> if this instance can support a new context; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivator.ImplementationType">
            <summary>
            The type that will be used to reflectively instantiate the component instances.
            </summary>
            <remarks>
            The actual implementation type may be substituted with a dynamically-generated subclass.
            Note that functionality that  relies on this feature will obviously not be available to provided instances or
            to delegate-created instances; interface-based AOP is recommended in these situations.
            </remarks>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivator.ConstructorInvoker">
            <summary>
            Gets or sets the constructor invoker.
            </summary>
            <value>The constructor invoker.</value>
        </member>
        <member name="T:Autofac.Component.Activation.ReflectionActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.ComponentDoesNotSupportService">
            <summary>
              Looks up a localized string similar to The component &apos;{0}&apos; does not support the service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.Description">
            <summary>
              Looks up a localized string similar to Reflective.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.MissingParameter">
            <summary>
              Looks up a localized string similar to parameter &apos;{0}&apos; of type &apos;{1}&apos; is not resolvable.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.NoPublicConstructor">
            <summary>
              Looks up a localized string similar to The component &apos;{0}&apos; has no public constructors..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.NoResolvableConstructor">
            <summary>
              Looks up a localized string similar to The component &apos;{0}&apos; has no resolvable constructors. Unsuitable constructors included:{1}.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.ParameterNameNotNullOrEmpty">
            <summary>
              Looks up a localized string similar to Parameter names cannot be null or empty (component &apos;{0}&apos;)..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.ParameterSpecifiedMultipleTimes">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; has been specified multiple times for component &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.PropertyNameNotNullOrEmpty">
            <summary>
              Looks up a localized string similar to Property names cannot be null or empty (component &apos;{0}&apos;)..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.PropertyNotFound">
            <summary>
              Looks up a localized string similar to No property named &apos;{0}&apos; exists on component &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.ReflectionActivatorResources.PropertySpecifiedMultipleTimes">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; has been specified multiple times for component &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.ResolvedParameter">
            <summary>
            Flexible parameter type allows arbitrary values to be retrieved from the resolution context.
            </summary>
        </member>
        <member name="M:Autofac.ResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Autofac.IContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IContext,System.Object})">
            <summary>
            Create an instance of the ResolvedParameter class.
            </summary>
            <param name="predicate">A predicate that determines which parameters on a constructor will be supplied by this instance.</param>
            <param name="valueAccessor">A function that supplies the parameter value given the context.</param>
        </member>
        <member name="M:Autofac.ResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.SequenceExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the strings into one single string interspersing the elements with the separator (a-la
            System.String.Join()).
            </summary>
            <param name="elements">The elements.</param>
            <param name="separator">The separator.</param>
            <returns>The joined string.</returns>
        </member>
        <member name="M:Autofac.SequenceExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the item to the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="trailingItem">The trailing item.</param>
            <returns></returns>
        </member>
        <member name="M:Autofac.SequenceExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the item to the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="leadingItem">The leading item.</param>
            <returns></returns>
        </member>
        <member name="T:Autofac.ComponentNotRegisteredException">
            <summary>
            A service was requested that cannot be provided
            by the container.
            </summary>
        </member>
        <member name="M:Autofac.ComponentNotRegisteredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ComponentNotRegisteredException"/> class.
            </summary>
        </member>
        <member name="M:Autofac.ComponentNotRegisteredException.#ctor(Autofac.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Autofac.ComponentNotRegisteredException.#ctor(Autofac.Service,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Autofac.ComponentNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Autofac.ComponentNotRegisteredExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ComponentNotRegisteredExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ComponentNotRegisteredExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ComponentNotRegisteredExceptionResources.Message">
            <summary>
              Looks up a localized string similar to The requested service &apos;{0}&apos; has not been registered..
            </summary>
        </member>
        <member name="T:Autofac.Component.Scope.SingletonScope">
            <summary>
            Restricts the component to providing a single instance in the root context only.
            </summary>
        </member>
        <member name="M:Autofac.Component.Scope.SingletonScope.DuplicateForNewContext(Autofac.Component.IScope@)">
            <summary>
            Try to create a scope container for a new context.
            </summary>
            <param name="newScope">The duplicate.</param>
            <returns>
            True if the semantics of the scope model allow for new contexts.
            </returns>
        </member>
        <member name="M:Autofac.Component.Scope.SingletonScope.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Autofac.Component.Scope.ContainerScopeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.ContainerScopeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.ContainerScopeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.ContainerScopeResources.ContextScopeViolated">
            <summary>
              Looks up a localized string similar to A context activation scope can only contain one instance, and the current instance has already been set..
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.ContainerScopeResources.Description">
            <summary>
              Looks up a localized string similar to Container.
            </summary>
        </member>
        <member name="P:Autofac.Component.Scope.ContainerScopeResources.InstanceNotAvailable">
            <summary>
              Looks up a localized string similar to The contextual instance has not been created. Check for this condition with InstanceAvailable before calling GetInstance()..
            </summary>
        </member>
        <member name="T:Autofac.Component.Activation.SpecificConstructorSelector">
            <summary>
            Chooses a constructor based on an exact signature.
            </summary>
        </member>
        <member name="M:Autofac.Component.Activation.SpecificConstructorSelector.#ctor(System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Component.Activation.SpecificConstructorSelector"/> class.
            </summary>
            <param name="constructorSignature">The constructor signature.</param>
        </member>
        <member name="M:Autofac.Component.Activation.SpecificConstructorSelector.SelectConstructor(System.Collections.Generic.ICollection{System.Reflection.ConstructorInfo})">
            <summary>
            Returns the most suitable constructor from those provided.
            </summary>
            <param name="possibleConstructors">Required. Must contain at least one item.</param>
            <returns>The most suitable constructor.</returns>
        </member>
        <member name="T:Autofac.Component.Activation.SpecificConstructorSelectorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.SpecificConstructorSelectorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.SpecificConstructorSelectorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.SpecificConstructorSelectorResources.RequiredConstructorNotAvailable">
            <summary>
              Looks up a localized string similar to The required constructor is unavailable..
            </summary>
        </member>
        <member name="P:Autofac.Component.Activation.SpecificConstructorSelectorResources.TypeCannotBeNull">
            <summary>
              Looks up a localized string similar to A constructor type signature cannot contain null..
            </summary>
        </member>
        <member name="T:Autofac.Component.Tagged.TaggedRegistrationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistrationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistrationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistrationResources.TaggedContextNotFound">
            <summary>
              Looks up a localized string similar to No context was found with tag &apos;{0}&apos;, or the component is registered with singleton scope..
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistrationResources.ToStringFormat">
            <summary>
              Looks up a localized string similar to {0}, Tag = {1}.
            </summary>
        </member>
        <member name="T:Autofac.ContextTag`1">
            <summary>
            Registered in the container to support tagged extensions. Stores the
            tag for a single container, and allows traversal of the context tree.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Autofac.ContextTag`1.Tag">
            <summary>
            The tag for the current context. Can only be accessed when HasTag is true.
            </summary>
        </member>
        <member name="P:Autofac.ContextTag`1.HasTag">
            <summary>
            Gets a value indicating whether this instance has a tag.
            </summary>
            <value><c>true</c> if this instance has a tag; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Autofac.ContextTagResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.ContextTagResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.ContextTagResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.ContextTagResources.ContextNotTagged">
            <summary>
              Looks up a localized string similar to The context does not have a tag value applied..
            </summary>
        </member>
        <member name="T:Autofac.Component.Tagged.TaggedRegistration`1">
            <summary>
            A TaggedRegistration decorates an IComponentRegistration to implement the Autofac tagging feature.
            </summary>
        </member>
        <member name="M:Autofac.Component.Tagged.TaggedRegistration`1.#ctor(`0,Autofac.IComponentRegistration)">
            <summary>
            Create a new TaggedRegistration.
            </summary>
            <param name="tag">The tag corresponding to the context in which this
            component may be resolved.</param>
            <param name="inner">The decorated registration.</param>
        </member>
        <member name="M:Autofac.Component.Tagged.TaggedRegistration`1.ResolveInstance(Autofac.IContext,System.Collections.Generic.IEnumerable{Autofac.Parameter},Autofac.IDisposer,System.Boolean@)">
            <summary>
            	<i>Must</i> return a valid instance, or throw
            an exception on failure.
            </summary>
            <param name="context">The context that is to be used
            to resolve the instance's dependencies.</param>
            <param name="parameters">Parameters that can be used in the resolution process.</param>
            <param name="disposer">The disposer.</param>
            <param name="newInstance">if set to <c>true</c> a new instance was created.</param>
            <returns>A newly-resolved instance.</returns>
        </member>
        <member name="M:Autofac.Component.Tagged.TaggedRegistration`1.DuplicateForNewContext(Autofac.IComponentRegistration@)">
            <summary>
            Create a duplicate of this instance if it is semantically valid to
            copy it to a new context.
            </summary>
            <param name="duplicate">The duplicate.</param>
            <returns>True if the duplicate was created.</returns>
        </member>
        <member name="M:Autofac.Component.Tagged.TaggedRegistration`1.InstanceActivated(Autofac.IContext,System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Component.Tagged.TaggedRegistration`1.Dispose">
            <summary>
            Disposes the innner registration.
            </summary>
        </member>
        <member name="M:Autofac.Component.Tagged.TaggedRegistration`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistration`1.Tag">
            <summary>
            Gets the tag applied to the registration.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistration`1.Descriptor">
            <summary>
            Describes the component registration and the
            services it provides.
            </summary>
        </member>
        <member name="E:Autofac.Component.Tagged.TaggedRegistration`1.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Component.Tagged.TaggedRegistration`1.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Component.Tagged.TaggedRegistration`1.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="P:Autofac.Component.Tagged.TaggedRegistration`1.InnerRegistration">
            <summary>
            Tags are implemented as decorators over other kinds of component registrations. The inner
            registration is the decorated instance.
            </summary>
        </member>
        <member name="T:Autofac.TypedParameter">
            <summary>
            A parameter that can supply values to sites that exactly
            match a specified type.
            </summary>
        </member>
        <member name="M:Autofac.TypedParameter.#ctor(System.Type,System.Object)">
            <summary>
            Create a typed parameter for the specified type.
            </summary>
            <param name="type">The exact type to match.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Autofac.TypedParameter.From``1(``0)">
            <summary>
            Shortcut for creating <see cref="T:Autofac.TypedParameter"/> 
            by using the <typeparamref name="T"/>
            </summary>
            <typeparam name="T">type to be used for the parameter</typeparam>
            <param name="value">The parameter value.</param>
            <returns>new typed parameter</returns>
        </member>
        <member name="P:Autofac.TypedParameter.Type">
            <summary>
            The type against which sites are matched.
            </summary>
        </member>
        <member name="T:Autofac.TypedService">
            <summary>
            Identifies a service according to a type to which it can be assigned.
            </summary>
        </member>
        <member name="M:Autofac.TypedService.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.TypedService"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Autofac.TypedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.TypedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.TypedService.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Autofac.TypedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Autofac.TypeManipulation">
            <summary>
            Some handy type conversion routines.
            </summary>
        </member>
        <member name="M:Autofac.TypeManipulation.ChangeToCompatibleType(System.Object,System.Type)">
            <summary>
            Does its best to convert whatever the value is into the destination
            type. Null in yields null out for value types and the default(T)
            for value types (this may change.)
            </summary>
            <param name="value">The value.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns>An object of the destination type.</returns>
        </member>
        <member name="T:Autofac.UniqueService">
            <summary>
            A handy unique service identifier type - all instances will be regarded as unequal.
            </summary>
        </member>
        <member name="M:Autofac.UniqueService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.UniqueService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.UniqueService.Description">
            <summary>
            Provides a programmer-readable description of the identifying feature of the service.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
