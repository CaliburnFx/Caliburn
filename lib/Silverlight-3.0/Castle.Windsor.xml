<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Windsor</name>
    </assembly>
    <members>
        <member name="T:Castle.Windsor.Configuration.Interpreters.AbstractInterpreter">
            <summary>
            Provides common methods for those who wants 
            to implement <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/>
            </summary>
        </member>
        <member name="T:Castle.Windsor.Configuration.IConfigurationInterpreter">
            <summary>
            Interpreter of a specific language to describe 
            configuration nodes in a hierachical manner.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.IConfigurationInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:Castle.MicroKernel.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="resource"></param>
            <param name="store"></param>
        </member>
        <member name="P:Castle.Windsor.Configuration.IConfigurationInterpreter.EnvironmentName">
            <summary>
            Gets or sets the name of the environment.
            </summary>
            <value>The name of the environment.</value>
        </member>
        <member name="P:Castle.Windsor.Configuration.IConfigurationInterpreter.Source">
            <summary>
            Exposes the reference to <see cref="T:Castle.Core.Resource.IResource"/>
            which the interpreter is likely to hold
            </summary>
        </member>
        <member name="M:Castle.Windsor.Configuration.Interpreters.AbstractInterpreter.ProcessResource(Castle.Core.Resource.IResource,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Should obtain the contents from the resource,
            interpret it and populate the <see cref="T:Castle.MicroKernel.IConfigurationStore"/>
            accordingly.
            </summary>
            <param name="resource"></param>
            <param name="store"></param>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.AbstractInterpreter.Source">
            <summary>
            Exposes the reference to <see cref="T:Castle.Core.Resource.IResource"/>
            which the interpreter is likely to hold
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.Windsor.Configuration.Interpreters.AbstractInterpreter.EnvironmentName">
            <summary>
            Gets or sets the name of the environment.
            </summary>
            <value>The name of the environment.</value>
        </member>
        <member name="T:Castle.Windsor.Installer.EnvironmentDelegate">
            <summary>
            Delegate to provide environment name.
            </summary>
            <returns>The environment name.</returns>
        </member>
        <member name="T:Castle.Windsor.IWindsorInstaller">
            <summary>
            The contract to install components in the container.
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorInstaller.Install(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Performs the installation in the <see cref="T:Castle.Windsor.IWindsorContainer"/>.
            </summary>
            <param name="container">The container.</param>
            <param name="store">The configuration store.</param>
        </member>
        <member name="M:Castle.Windsor.Installer.ConfigurationInstaller.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>
            Initializes a new instance of the ConfigurationInstaller class.
            </summary>
        </member>
        <member name="M:Castle.Windsor.Installer.ConfigurationInstaller.Environment(System.String)">
            <summary>
            Sets the configuration environment name.
            </summary>
            <param name="environmentName">The environment name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.Installer.ConfigurationInstaller.Environment(Castle.Windsor.Installer.EnvironmentDelegate)">
            <summary>
            Set the configuration environment strategy.
            </summary>
            <param name="environment">The environment strategy.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.Windsor.Installer.DefaultComponentInstaller">
            <summary>
            Default <see cref="T:Castle.Windsor.IComponentsInstaller"/> implementation.
            </summary>
        </member>
        <member name="T:Castle.Windsor.IComponentsInstaller">
            <summary>
            Installs the components and facilities based on the
            information on the configuration store.
            </summary>
        </member>
        <member name="M:Castle.Windsor.IComponentsInstaller.SetUp(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Perform installation.
            </summary>
            <param name="container">Target container</param>
            <param name="store">Configuration store</param>
        </member>
        <member name="M:Castle.Windsor.Installer.DefaultComponentInstaller.SetUp(Castle.Windsor.IWindsorContainer,Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Perform installation.
            </summary>
            <param name="container">Target container</param>
            <param name="store">Configuration store</param>
        </member>
        <member name="M:Castle.Windsor.Proxy.AbstractProxyFactory.ObtainInterceptors(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel,Castle.MicroKernel.CreationContext)">
            <summary>
            Obtains the interceptors associated with the component.
            </summary>
            <param name="kernel">The kernel instance</param>
            <param name="model">The component model</param>
            <param name="context">The creation context</param>
            <returns>interceptors array</returns>
        </member>
        <member name="T:Castle.Windsor.Proxy.DefaultProxyFactory">
            <summary>
            This implementation of <see cref="T:Castle.MicroKernel.IProxyFactory"/> relies 
            on DynamicProxy to expose proxy capabilies.
            </summary>
            <remarks>
            Note that only virtual methods can be intercepted in a 
            concrete class. However, if the component 
            was registered with a service interface, we proxy
            the interface and the methods don't need to be virtual,
            </remarks>
        </member>
        <member name="M:Castle.Windsor.Proxy.DefaultProxyFactory.#ctor">
            <summary>
            Constructs a DefaultProxyFactory
            </summary>
        </member>
        <member name="M:Castle.Windsor.Proxy.DefaultProxyFactory.Create(Castle.MicroKernel.IKernel,System.Object,Castle.Core.ComponentModel,Castle.MicroKernel.CreationContext,System.Object[])">
            <summary>
            Creates the proxy for the supplied component.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="target">The target.</param>
            <param name="model">The model.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <param name="context">The creation context</param>
            <returns>The component proxy.</returns>
        </member>
        <member name="M:Castle.Windsor.Proxy.DefaultProxyFactory.RequiresTargetInstance(Castle.MicroKernel.IKernel,Castle.Core.ComponentModel)">
            <summary>
            Determines if the component requiries a target instance for proxying.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="model">The model.</param>
            <returns>true if an instance is required.</returns>
        </member>
        <member name="T:Castle.Windsor.IContainerAccessor">
            <summary>
            This interface should be implemented by classes
            that are available in a bigger context, exposing
            the container to different areas in the same application.
            <para>
            For example, in Web application, the (global) HttpApplication
            subclasses should implement this interface to expose 
            the configured container
            </para>
            </summary>
        </member>
        <member name="T:Castle.Windsor.IEnvironmentInfo">
            <summary>
            Gets the environment information (name). Implementors should 
            use to define their environments and how those affect the configuration.
            </summary>
        </member>
        <member name="M:Castle.Windsor.IEnvironmentInfo.GetEnvironmentName">
            <summary>
            Gets the name of the environment.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.Windsor.IWindsorContainer">
            <summary>
            The <c>IWindsorContainer</c> interface exposes all the 
            functionality the Windsor implements.
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>
            Registers a facility within the container.
            </summary>
            <param name="key">The key by which the <see cref="T:Castle.MicroKernel.IFacility"/> gets indexed.</param>
            <param name="facility">The <see cref="T:Castle.MicroKernel.IFacility"/> to add to the container.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility``1(System.String)">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility``1(System.String,System.Action{``0})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="key"></param>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility``1(System.String,System.Func{``0,System.Object})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="key"></param>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility``1">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility``1(System.Action{``0})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddFacility``1(System.Func{``0,System.Object})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent(System.String,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="serviceType">The service <see cref="T:System.Type"/> that the component implements.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentLifeStyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentLifeStyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="serviceType">The service <see cref="T:System.Type"/> that the component implements.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithProperties(System.String,System.Type,System.Type,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class and an interface 
            as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="classType"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent``1">
            <summary>
            Adds a component to be managed by the container.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent``1(System.String)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>		
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentLifeStyle``1(Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentLifeStyle``1(System.String,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>		
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent``2">
            <summary>
            Adds a component to be managed by the container
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponent``2(System.String)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentLifeStyle``2(Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentLifeStyle``2(System.String,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithProperties``1(System.Collections.IDictionary)">
            <summary>
            Adds a concrete class as a component and specify the extended properties.
            Used by facilities, mostly.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentWithProperties``1(System.String,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>		
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentProperties``2(System.Collections.IDictionary)">
            <summary>
            Adds a concrete class and an interface 
            as a component and specify the extended properties.
            Used by facilities, mostly.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="I"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddComponentProperties``2(System.String,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class and an interface 
            as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <typeparam name="I"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Register(Castle.MicroKernel.Registration.IRegistration[])">
            <summary>
            Registers the components provided by the <see cref="T:Castle.MicroKernel.Registration.IRegistration"/>s
            with the <see cref="T:Castle.Windsor.IWindsorContainer"/>.
            <para/>
            Create a new registration using <see cref="T:Castle.MicroKernel.Registration.Component"/>.For() or <see cref="T:Castle.MicroKernel.Registration.AllTypes"/>.
            </summary>
            <example>
            <code>
            container.Register(Component.For&lt;IService&gt;().ImplementedBy&lt;DefaultService&gt;());
            </code>
            </example>
            <param name="registrations">The component registrations.</param>
            <returns>The container.</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Install(Castle.Windsor.IWindsorInstaller[])">
            <summary>
            Installs the components provided by the <see cref="T:Castle.Windsor.IWindsorInstaller"/>s
            with the <see cref="T:Castle.Windsor.IWindsorContainer"/>.
            <param name="installers">The component installers.</param>
            <returns>The container.</returns>
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String,System.Object)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String,System.Type)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.Type)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.Type,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.Type,System.Object)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Release(System.Object)">
            <summary>
            Releases a component instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Registers a subcontainer. The components exposed
            by this container will be accessible from subcontainers.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Remove a child container
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.GetChildContainer(System.String)">
            <summary>
            Gets a child container instance by name.
            </summary>
            <param name="name">The container's name.</param>
            <returns>The child container instance or null</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1">
            <summary>
            Returns a component instance by the service
            </summary>
            <typeparam name="T">Service type</typeparam>
            <returns>The component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1(System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the service
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="arguments"></param>
            <returns>The component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1(System.Object)">
            <summary>
            Returns a component instance by the service
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="argumentsAsAnonymousType"></param>
            <returns>The component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key">Component's key</param>
            <typeparam name="T">Service type</typeparam>
            <returns>The Component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the key
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="key">Component's key</param>
            <param name="arguments"></param>
            <returns>The Component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve``1(System.String,System.Object)">
            <summary>
            Returns a component instance by the key
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="key">Component's key</param>
            <param name="argumentsAsAnonymousType"></param>
            <returns>The Component instance</returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.ResolveAll``1">
            <summary>
            Resolve all valid components that match this type.
            </summary>
            <typeparam name="T">The service type</typeparam>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.ResolveAll(System.Type)">
            <summary>
            Resolve all valid components that mathc this service
            <param name="service">the service to match</param>
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.ResolveAll(System.Type,System.Collections.IDictionary)">
            <summary>
            Resolve all valid components that mathc this service
            <param name="service">the service to match</param>
            <param name="arguments">Arguments to resolve the service</param>
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.ResolveAll(System.Type,System.Object)">
            <summary>
            Resolve all valid components that mathc this service
            <param name="service">the service to match</param>
            <param name="argumentsAsAnonymousType">Arguments to resolve the service</param>
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.ResolveAll``1(System.Collections.IDictionary)">
            <summary>
            Resolve all valid components that match this type.
            <typeparam name="T">The service type</typeparam>
            <param name="arguments">Arguments to resolve the service</param>
            </summary>
        </member>
        <member name="M:Castle.Windsor.IWindsorContainer.ResolveAll``1(System.Object)">
            <summary>
            Resolve all valid components that match this type.
            <typeparam name="T">The service type</typeparam>
            <param name="argumentsAsAnonymousType">Arguments to resolve the service</param>
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Name">
            <summary>
            Gets the container's name
            </summary>
            <remarks>
            Only useful when child containers are being used
            </remarks>
            <value>The container's name.</value>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Item(System.String)">
            <summary>
            Shortcut to <see cref="M:Castle.Windsor.IWindsorContainer.Resolve(System.String)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Item(System.Type)">
            <summary>
            Shortcut to <see cref="M:Castle.Windsor.IWindsorContainer.Resolve(System.Type)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Kernel">
            <summary>
            Returns the inner instance of the MicroKernel
            </summary>
        </member>
        <member name="P:Castle.Windsor.IWindsorContainer.Parent">
            <summary>
            Gets or sets the parent container if this instance
            is a sub container.
            </summary>
        </member>
        <member name="T:Castle.Windsor.WindsorContainer">
            <summary>
            Implementation of <see cref="T:Castle.Windsor.IWindsorContainer"/>
            which delegates to <see cref="T:Castle.MicroKernel.IKernel"/> implementation.
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor">
            <summary>
            Constructs a container without any external 
            configuration reference
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.MicroKernel.IConfigurationStore)">
            <summary>
            Constructs a container using the specified 
            <see cref="T:Castle.MicroKernel.IConfigurationStore"/> implementation.
            </summary>
            <param name="store">The instance of an <see cref="T:Castle.MicroKernel.IConfigurationStore"/> implementation.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>
            Constructs a container using the specified 
            <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/> implementation.
            </summary>
            <param name="interpreter">The instance of an <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/> implementation.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.Windsor.Configuration.IConfigurationInterpreter,Castle.Windsor.IEnvironmentInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Windsor.WindsorContainer"/> class.
            </summary>
            <param name="interpreter">The interpreter.</param>
            <param name="environmentInfo">The environment info.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>
            Constructs a container using the specified <see cref="T:Castle.MicroKernel.IKernel"/>
            implementation. Rarely used.
            </summary>
            <remarks>
            This constructs sets the Kernel.ProxyFactory property to
            <c>Proxy.DefaultProxyFactory</c>
            </remarks>
            <param name="kernel">Kernel instance</param>
            <param name="installer">Installer instance</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(System.String,Castle.MicroKernel.IKernel,Castle.Windsor.IComponentsInstaller)">
            <summary>
            Constructs a container using the specified <see cref="T:Castle.MicroKernel.IKernel"/>
            implementation. Rarely used.
            </summary>
            <remarks>
            This constructs sets the Kernel.ProxyFactory property to
            <c>Proxy.DefaultProxyFactory</c>
            </remarks>
            <param name="name">Container's name</param>
            <param name="kernel">Kernel instance</param>
            <param name="installer">Installer instance</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.MicroKernel.IProxyFactory)">
            <summary>
            Constructs with a given <see cref="T:Castle.MicroKernel.IProxyFactory"/>.
            </summary>
            <param name="proxyFactory">A instance of an <see cref="T:Castle.MicroKernel.IProxyFactory"/>.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(Castle.Windsor.IWindsorContainer,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>
            Constructs a container assigning a parent container 
            before starting the dependency resolution.
            </summary>
            <param name="parent">The instance of an <see cref="T:Castle.Windsor.IWindsorContainer"/></param>
            <param name="interpreter">The instance of an <see cref="T:Castle.Windsor.Configuration.IConfigurationInterpreter"/> implementation</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.#ctor(System.String,Castle.Windsor.IWindsorContainer,Castle.Windsor.Configuration.IConfigurationInterpreter)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.Windsor.WindsorContainer"/> class.
            </summary>
            <param name="name">The container's name.</param>
            <param name="parent">The parent.</param>
            <param name="interpreter">The interpreter.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility(System.String,Castle.MicroKernel.IFacility)">
            <summary>
            Registers a facility within the kernel.
            </summary>
            <param name="key"></param>
            <param name="facility"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility``1(System.String)">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility``1(System.String,System.Action{``0})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="key"></param>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility``1(System.String,System.Func{``0,System.Object})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="key"></param>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility``1">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility``1(System.Action{``0})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddFacility``1(System.Func{``0,System.Object})">
            <summary>
            Creates and adds an <see cref="T:Castle.MicroKernel.IFacility"/> facility to the container.
            </summary>
            <typeparam name="T">The facility type.</typeparam>
            <param name="onCreate">The callback for creation.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent(System.String,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key"></param>
            <param name="classType"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent(System.String,System.Type,System.Type)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key"></param>
            <param name="serviceType"></param>
            <param name="classType"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentLifeStyle(System.String,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentLifeStyle(System.String,System.Type,System.Type,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="serviceType">The service <see cref="T:System.Type"/> that the component implements.</param>
            <param name="classType">The <see cref="T:System.Type"/> to manage.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent``1">
            <summary>
            Adds a component to be managed by the container.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent``1(System.String)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>		
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentLifeStyle``1(Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent``2(System.String)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentLifeStyle``2(Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentLifeStyle``1(System.String,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>		
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponent``2">
            <summary>
            Adds a component to be managed by the container
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentLifeStyle``2(System.String,Castle.Core.LifestyleType)">
            <summary>
            Adds a component to be managed by the container
            </summary>
            <typeparam name="I">The service <see cref="T:System.Type"/> that the component implements.</typeparam>
            <typeparam name="T">The <see cref="T:System.Type"/> to manage.</typeparam>
            <param name="key">The key by which the component gets indexed.</param>
            <param name="lifestyle">The <see cref="T:Castle.Core.LifestyleType"/> with which to manage the component.</param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentWithProperties``1(System.Collections.IDictionary)">
            <summary>
            Adds a concrete class as a component and specify the extended properties.
            Used by facilities, mostly.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentWithProperties``1(System.String,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>		
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentProperties``2(System.Collections.IDictionary)">
            <summary>
            Adds a concrete class and an interface 
            as a component and specify the extended properties.
            Used by facilities, mostly.
            The key to obtain the component will be the FullName of the type.
            </summary>
            <typeparam name="I"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddComponentProperties``2(System.String,System.Collections.IDictionary)">
            <summary>
            Adds a concrete class and an interface 
            as a component and specify the extended properties.
            Used by facilities, mostly.
            </summary>
            <typeparam name="I"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="extendedProperties"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Register(Castle.MicroKernel.Registration.IRegistration[])">
            <summary>
            Registers the components described by the <see cref="T:Castle.MicroKernel.Registration.ComponentRegistration`1"/>s
            with the <see cref="T:Castle.Windsor.IWindsorContainer"/>.
            <param name="registrations">The component registrations.</param>
            <returns>The container.</returns>
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Install(Castle.Windsor.IWindsorInstaller[])">
            <summary>
            Installs the components provided by the <see cref="T:Castle.Windsor.IWindsorInstaller"/>s
            with the <see cref="T:Castle.Windsor.IWindsorContainer"/>.
            <param name="installers">The component installers.</param>
            <returns>The container.</returns>
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.Type,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.Type,System.Object)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String,System.Object)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.Type)">
            <summary>
            Returns a component instance by the service
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.ResolveAll``1">
            <summary>
            Resolve all valid components that match this type.
            </summary>
            <typeparam name="T">The service type</typeparam>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.ResolveAll``1(System.Collections.IDictionary)">
            <summary>
            Resolve all valid components that match this type.
            <typeparam name="T">The service type</typeparam>
            <param name="arguments">Arguments to resolve the service</param>
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.ResolveAll``1(System.Object)">
            <summary>
            Resolve all valid components that match this type.
            <typeparam name="T">The service type</typeparam>
            <param name="argumentsAsAnonymousType">Arguments to resolve the service</param>
            </summary>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String,System.Type)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String,System.Type,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve(System.String,System.Type,System.Object)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="service"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1(System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the service 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1(System.Object)">
            <summary>
            Returns a component instance by the service 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1(System.String,System.Object)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <param name="argumentsAsAnonymousType"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1">
            <summary>
            Returns a component instance by the service 
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Resolve``1(System.String)">
            <summary>
            Returns a component instance by the key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Release(System.Object)">
            <summary>
            Releases a component instance
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.AddChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Registers a subcontainer. The components exposed
            by this container will be accessible from subcontainers.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.RemoveChildContainer(Castle.Windsor.IWindsorContainer)">
            <summary>
            Removes (unregisters) a subcontainer.  The components exposed by this container
            will no longer be accessible to the child container.
            </summary>
            <param name="childContainer"></param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.GetChildContainer(System.String)">
            <summary>
            Gets a child container instance by name.
            </summary>
            <param name="name">The container's name.</param>
            <returns>The child container instance or null</returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <returns>
            A service object of type serviceType.
            </returns>
            <param name="serviceType">An object that specifies the type of service object to get. </param>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.GetService``1">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <returns>
            A service object of type serviceType.
            </returns>
        </member>
        <member name="M:Castle.Windsor.WindsorContainer.Dispose">
            <summary>
            Executes Dispose on underlying <see cref="T:Castle.MicroKernel.IKernel"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Name">
            <summary>
            Gets the container's name
            </summary>
            <remarks>
            Only useful when child containers are being used
            </remarks>
            <value>The container's name.</value>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Kernel">
            <summary>
            Returns the inner instance of the MicroKernel
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Parent">
            <summary>
            Gets or sets the parent container if this instance
            is a sub container.
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Item(System.String)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.WindsorContainer.Resolve(System.String)"/>
            </summary>
        </member>
        <member name="P:Castle.Windsor.WindsorContainer.Item(System.Type)">
            <summary>
            Shortcut to the method <see cref="M:Castle.Windsor.WindsorContainer.Resolve(System.Type)"/>
            </summary>
        </member>
    </members>
</doc>
