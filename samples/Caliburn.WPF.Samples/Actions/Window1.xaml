<Window x:Class="Actions.Window1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:Actions"
        xmlns:cal="http://www.caliburnproject.org"
        Title="Window1"
        SizeToContent="WidthAndHeight">
    
    <!--Note: Sets a target for the actions.  -->
    <!--Note: This can be done with databinding, resources or by using the ResolveExtension to grab an instance.-->
    <cal:Action.Target>
        <local:Calculator />    
    </cal:Action.Target>
    
    <StackPanel>
        <Grid Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            
            <TextBox x:Name="left" 
                     Grid.Column="0"/>
            <TextBlock Text="/"
                       Margin="10 0"
                       Grid.Column="1"/>
            <TextBox x:Name="right" 
                     Grid.Column="2"/>
            <Border BorderBrush="Black"
                    BorderThickness="0 0 0 1"
                    Margin="10 0 0 0"
                    Grid.Column="3">
                <TextBlock x:Name="DivideResult" />
            </Border>
            
        </Grid>
        
        <!--Note: Calls the Divide action.  The framework must infer the trigger, message type and parameters.-->
        <!--Note: The UI availability cannot be updated when using inferred parameters.-->
        <Button Content="Divide (Attachment w/ Defaults)"
                cal:Message.Attach="Divide" />

        <!--Note: Calls the Divide action.  The framework must infer the trigger ande message type.-->
        <!--Note: UI availability will be updated.-->
        <!--Note: This is the preferred mechanism.-->
        <Button Content="Divide (Attachment w/ Default Trigger/Message and Explicit Parameters)"
                cal:Message.Attach="Divide(left.Text, right.Text) : DivideResult.Text" />

        <!--Note: Calls the Divide action.  The framework must infer the parameters.-->
        <!--Note: The UI availability cannot be updated when using inferred parameters.-->
        <Button Content="Divide (Attachment w/ Inferred Parameters)"
                cal:Message.Attach="[Event Click] = [Action Divide]" />

        <!--Note: Calls the Divide action.-->
        <!--Note: UI availability will be updated.-->
        <!--Note: This is the second most preferred mechanism.-->
        <Button Content="Divide (Attachment w/ Explicit Parameters)"
                cal:Message.Attach="[Event Click] = [Action Divide(left.Text, right.Text) : DivideResult.Text]" />

        <!--Note: Calls the Divide action.  The framework must infer the parameters.-->
        <!--Note: The UI availability cannot be updated when using inferred parameters.-->
        <!--Note: The triggers collection is only necessary when multiple triggers must be attached to a single element (see MessageTriggers sample).-->
        <Button Content="Divide (Trigger Collection w/ Inferred Parameters)">
            <cal:Message.Triggers>
                <cal:RoutedMessageTriggerCollection>
                    <cal:EventMessageTrigger EventName="Click">
                        <cal:EventMessageTrigger.Message>
                            <cal:ActionMessage MethodName="Divide" />
                        </cal:EventMessageTrigger.Message>
                    </cal:EventMessageTrigger>
                </cal:RoutedMessageTriggerCollection>
            </cal:Message.Triggers>
        </Button>

        <!--Note: Calls the Divide action.-->
        <!--Note: UI availability will be updated.-->
        <!--Note: The triggers collection is only necessary when multiple triggers must be attached to a single element (see MessageTriggers sample).-->
        <Button Content="Divide (Trigger Collection w/ Explicit Parameters)">
            <cal:Message.Triggers>
                <cal:RoutedMessageTriggerCollection>
                    <cal:EventMessageTrigger EventName="Click">
                        <cal:EventMessageTrigger.Message>
                            <cal:ActionMessage MethodName="Divide"
                                           OutcomePath="DivideResult.Text">
                                <!--Note: The declaration of parameters is different from Silverlight.-->
                                <cal:Parameter Value="{Binding ElementName=left, Path=Text}"/>
                                <cal:Parameter Value="{Binding ElementName=right, Path=Text}"/>
                            </cal:ActionMessage>
                        </cal:EventMessageTrigger.Message>
                    </cal:EventMessageTrigger>
                </cal:RoutedMessageTriggerCollection>
            </cal:Message.Triggers>
        </Button>

    </StackPanel>
</Window>