<UserControl x:Class="AvailabilityEffects.Page"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:AvailabilityEffects"
             xmlns:ca="clr-namespace:Caliburn.PresentationFramework.Actions;assembly=Caliburn.PresentationFramework"
             xmlns:rm="clr-namespace:Caliburn.PresentationFramework.RoutedMessaging;assembly=Caliburn.PresentationFramework"
             xmlns:tr="clr-namespace:Caliburn.PresentationFramework.RoutedMessaging.Triggers;assembly=Caliburn.PresentationFramework"
             Width="400"
             Height="300">
    <!--Note: Sets a target for the actions.  -->
    <!--Note: This can be done with databinding, resources or by using a string to resolve by key from the container.-->
    <!--Note: I generally prefer not to have the view control instantiation. This is for demo purposes only.-->
    <ca:Action.Target>
        <local:Calculator />
    </ca:Action.Target>
    
    <StackPanel>
        <Grid Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <TextBox x:Name="left"
                     Grid.Column="0" />
            <TextBlock Text="/"
                       Margin="10 0"
                       Grid.Column="1" />
            <TextBox x:Name="right"
                     Grid.Column="2" />
            <Border BorderBrush="Black"
                    BorderThickness="0 0 0 1"
                    Margin="10 0 0 0"
                    Grid.Column="3">
                <TextBlock x:Name="DivideResult" />
            </Border>

        </Grid>

        <!--Note: The UI will be enabled/disabled based on the action.-->
        <Button Content="Divide (Attachment w/ Default (Disable) Availability)"
                rm:Message.Attach="Divide(left.Text, right.Text) : DivideResult.Text" />

        <!--Note: The UI will not be affected by the state of the action.-->
        <Button Content="Divide (Attachment w/ None Availability)"
                rm:Message.AvailabilityEffect="None"
                rm:Message.Attach="Divide(left.Text, right.Text) : DivideResult.Text" />

        <!--Note: The UI will be hidden when the action is not available.-->
        <Button Content="Divide (Attachment w/ Hide Availability)"
                rm:Message.AvailabilityEffect="Hide"
                rm:Message.Attach="Divide(left.Text, right.Text) : DivideResult.Text" />

        <!--Note: The Ui will be collapsed when the action is not available.-->
        <Button Content="Divide (Attachment w/ Collapse Availability)"
                rm:Message.AvailabilityEffect="Collapse"
                rm:Message.Attach="Divide(left.Text, right.Text) : DivideResult.Text" />

        <!--Note: Custom availability applies by key.-->
        <Button Content="Divide (Attachment w/ Custom Availability)"
                rm:Message.AvailabilityEffect="Opacity"
                rm:Message.Attach="Divide(left.Text, right.Text) : DivideResult.Text" />

        <!--Note: IAvailabilityEffect can be applied on a per message basis.-->
        <Button Content="Divide (Trigger Collection w/ Hide Availability)">
            <rm:Message.Triggers>
                <rm:RoutedMessageTriggerCollection>
                    <tr:EventMessageTrigger EventName="Click">
                        <tr:EventMessageTrigger.Message>
                            <ca:ActionMessage MethodName="Divide"
                                           OutcomePath="DivideResult.Text"
                                           AvailabilityEffect="Hide">
                                <!--Note: The declaration of parameters is different from WPF.-->
                                <rm:Parameter ElementName="left" 
                                              Path="Text" />
                                <rm:Parameter ElementName="right" 
                                              Path="Text" />
                            </ca:ActionMessage>
                        </tr:EventMessageTrigger.Message>
                    </tr:EventMessageTrigger>
                </rm:RoutedMessageTriggerCollection>
            </rm:Message.Triggers>
        </Button>
    </StackPanel>
    
</UserControl>